x = "mpg"
data = mtcars
head(data)
x = mpg
x = deparse(substitute(mpg))
x
substitute(mpg)
runApp('learn-to-shine/compare-selectors/compareSelectors.R')
is.list
?is.list
caption = list(text = "sometext", title = "some title")
caption
caption$text
l = function() { paste ("here") }
caption = list(text = l(), title = "some title")
caption
deparse(substitute(l()))
deparse(substitute(l)
)
deparse(substitute(l))
runApp('learn-to-shine/compare-selectors/compareSelectors.R')
runApp('learn-to-shine/compare-selectors/compareSelectors.R')
l = "l"
t = "t"
cap = list(t = t, l = l)
cap
digest::digest(get(cap), algo = sha256)
digest::digest(get(cap), algo = "sha256")
digest::digest(get(cap$t), algo = "sha256")
names(cap)
runApp('learn-to-shine/compare-selectors/compareSelectors.R')
runApp('learn-to-shine/compare-selectors/modules')
runApp('learn-to-shine/compare-selectors/compareSelectors.R')
shiny::runApp('shiny-selectors/modules')
switch(source$scenario_type(),
"ASlib" = textInput("scenario", label = h4(strong("Type ASlib scenario")),
placeholder = "ex. SAT11-INDU", value = "SAT11-INDU"),
"Custom" =  list(shinyDirButton("scenario_upload", label = "Upload scenario",
"Select directory with scenario"),
verbatimTextOutput("scenario_dir", placeholder = TRUE))
)
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp()
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
sc = getCosealASScenario("SAT11-INDU")
summary(sc)
runApp('shiny-selectors/modules')
read_scenario(input$scenario_type, global$datapath, input$scenario)
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules-learner')
?shinyDirChoose
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
?fileInput
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
?load
ls()
var_name = "sc"
?deparse
v = deparse(var_name)
v
v = deparse(eval(var_name))
v
v =  deparse(substitute(var_name))
v
v = substitute(var_name)
v
v = deparse(var_name)
v
v = deparse("sc")
v
v = substitute("sc")
v
v = deparse(substitute("sc"))
v
var_name = load(sprintf("~/algorithm-selection-data/results-pair-standard/standard_%s.RData",  scenario$desc$scenario_id))
file_name = "~/algorithm-selection-data/results-pair-standard/standard_SAT11-HAND.RData"
file_name
var_name = load(file_name)
var_name
model = deparse(var_name)
model
model = deparse(substitvar_name)
model = deparse(substitute(var_name))
model
model = get(var_name)
model
sc
llama.cv = convertToLlamaCVFolds(sc)
data = fixFeckingPresolve(sc, llama.cv)
data$test
data$test[[1]]
head(data$data)
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
data$test
data$test[1:10]
data$test[[1:10]]
data$test[[1]]
data$test[[2]]
ids = rbind(data$test)
ids
ids = rbind(lapply(data$test, function(x) {x}))
ids
lapply(data$test, function(x) x)
lapply(data$test, function(x) unlist(x))
ids = unlist(data$test)
ids
runApp('shiny-selectors/experiments/experimentLayout.R')
library(shiny); runApp('shiny-selectors/experiments/experimentLayout.R')
global
library(shiny); runApp('shiny-selectors/experiments/experimentLayout.R')
source('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
install.packages("aslib")
install.packages("aslib")
library(shiny); runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
sc
sc = getCosealASScenario("SAT11-INDU")
sc$algo.runs
runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/staticUI.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
install.packages("shiny")
install.packages("shiny")
library(shiny); runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
sc
data
llama.cv = convertToLlamaCVFolds(sc)
data = fixFeckingPresolve(sc, llama.cv)
head(data$data)
getwd()
load("./shiny-selectors/example-inputs/id.RData")
s1 = combined_model
s1
create_model(type == "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = data)
create_model(type = "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = data)
create_model(type = "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = NULL)
learner = makeImputeWrapper(learner = setHyperPars(makeLearner("regr.featureless")),
classes = list(numeric = imputeMean(), integer = imputeMean(), logical = imputeMode(),
factor = imputeConstant("NA"), character = imputeConstant("NA")))
learner
model = regression(learner,data)
model
model$models
model
model$predictions
s1
s1$predictions
typeof(s1$predictions)
class(s1$predictions)
class(model$predictions)
runApp('shiny-selectors/experiments/changingTemp.R')
?req
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
data
print(data())
runApp('shiny-selectors/experiments/over.R')
runApp('over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
head(data$data$nvarsOrig)
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
typeof(data)
class(data)
class(sc)
class(sc$desc)
class(data$data)
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
install.packages('htmlwidgets')
install.packages("htmlwidgets")
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
library(RWeka)
sessionInfo()
install.packages("RWekajars")
install.packages("RWekajars")
library(RWeka)
sessionInfo()
library(rJava)
sessionInfo()
install.packages("rJava")
install.packages("rJava")
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
?parseASScenario
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
sc = parseASScenario("/home/damir/shiny-selectors/example-inputs/SAT11-INDU/")
sc
sc
clear
cls
sessionInfo()
remove.packages("aslib")
library(devtools)
install_version("aslib", version = "0.1")
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
sessionInfo()
library(shiny)
sessionInfo()
library("shiny")
sessionInfo()
remove.packages("shiny")
install.packages("shiny")
install.packages("shiny")
getwd()
setwd("./shiny-selectors/static_ui/")
# set up default directory for printing
sc = parseASScenario("../example-inputs/SAT11-INDU/")
# compareSelectors.R
# Damir Pulatov
library(llama)
library(aslib)
library(scatterD3)
source("./helpers.R")
# set up default directory for printing
sc = parseASScenario("../example-inputs/SAT11-INDU/")
# set up default directory for printing
path = "../example-inputs/SAT11-INDU/"
# function to load ASlib scenario
scenario_data = get_data("Custom", path = path, scenario_name = NULL)
scenario_data
# convert data into llama format
#scenario_data = reactive(get_data(load_scenario()))
get_ids = scenario_data$data[unlist(scenario_data$test), scenario_data$ids]
get_ids
file2 = "../example-inputs/metrics.RData"
file1 = "../example-inputs/id.RData"
file2 = "../example-inputs/metrics.RData"
temp_vals$selector1 = create_model(file_name = file1)
selector1 = create_model(file_name = file1)
selector2 = create_model(file_name = file2)
selector1 = create_model1(file_name = file1)
selector2 = create_model1(file_name = file2)
source("./helpers.R")
# set up default directory for printing
path = "../example-inputs/SAT11-INDU/"
file1 = "../example-inputs/id.RData"
file2 = "../example-inputs/metrics.RData"
selector1 = create_model1(file_name = file1)
selector2 = create_model1(file_name = file2)
# function to load ASlib scenario
scenario_data = get_data("Custom", path = path, scenario_name = NULL)
# convert data into llama format
#scenario_data = reactive(get_data(load_scenario()))
get_ids = scenario_data$data[unlist(scenario_data$test), scenario_data$ids]
# compute metrics of interest
penalties1 = misclassificationPenalties(scenario_data, selector1)
penalties2 = misclassificationPenalties(scenario_data, selector2)
build_mcp = build_data(get_ids, penalties1, penalties2)
data = build_mcp
# compute mean mcp for each model
single_mcp = compute_metric(scenario_data, choice = "sbs",
method = "mcp")
virtual_mcp = compute_metric(scenario_data, choice = "vbs",
method = "mcp")
model1_mcp = mean(penalties1())
model2_mcp = mean(penalties2())
model1_mcp = mean(penalties1)
model2_mcp = mean(penalties2)
# compute gaps closed
model1_gap_mcp = compute_gap(model1_mcp, virtual_mcp, single_mcp)
model2_gap_mcp = compute_gap(model2_mcp, virtual_mcp, single_mcp)
library(shiny); runApp('~/shiny-selectors/compareSelectors.R')
tooltip = reactive(paste("instance_id = ", get_ids, "<br>x = ",
data$x, "<br>y = ", data$y))
tooltip = paste("instance_id = ", get_ids, "<br>x = ",
data$x, "<br>y = ", data$y)
file1
# make names for selectors
selector1_name = file1
selector2_name = file2
make_par_title = paste("PAR10 Scores for ", selector1_name, " vs. ", selector2_name)
plot.text = paste("Misclassification Penalties for ", selector1_name, " vs. ", selector2_name)
title = paste("Misclassification Penalties")
# make scatterplot with misclassification penalties
plot1 = scatterD3(data = data, x = x, y = y, tooltip_text = tooltip(),
tooltip_position = "top right",
xlab = selector1_name, ylab = selector2_name,
point_size = 100, point_opacity = 0.5,
hover_size = 3, hover_opacity = 1,
color = "purple",
lines = lines(),
caption = list(text = plot.text(),
title = title()),
transitions = TRUE)
# make scatterplot with misclassification penalties
plot1 = scatterD3(data = data, x = x, y = y, tooltip_text = tooltip(),
tooltip_position = "top right",
xlab = selector1_name, ylab = selector2_name,
point_size = 100, point_opacity = 0.5,
hover_size = 3, hover_opacity = 1,
color = "purple",
lines = lines(),
caption = list(text = plot.text,
title = title),
transitions = TRUE)
# make scatterplot with misclassification penalties
plot1 = scatterD3(data = data, x = x, y = y, tooltip_text = tooltip(),
tooltip_position = "top right",
xlab = selector1_name, ylab = selector2_name,
point_size = 100, point_opacity = 0.5,
hover_size = 3, hover_opacity = 1,
color = "purple",
lines = lines,
caption = list(text = plot.text,
title = title),
transitions = TRUE)
# make scatterplot with misclassification penalties
plot1 = scatterD3(data = data, x = x, y = y, tooltip_text = tooltip,
tooltip_position = "top right",
xlab = selector1_name, ylab = selector2_name,
point_size = 100, point_opacity = 0.5,
hover_size = 3, hover_opacity = 1,
color = "purple",
lines = lines,
caption = list(text = plot.text,
title = title),
transitions = TRUE)
data
data$y
lines
# make scatterplot with misclassification penalties
plot1 = scatterD3(data = data, x = x, y = y, tooltip_text = tooltip,
tooltip_position = "top right",
xlab = selector1_name, ylab = selector2_name,
point_size = 100, point_opacity = 0.5,
hover_size = 3, hover_opacity = 1,
color = "purple",
lines = default_lines,
caption = list(text = plot.text,
title = title),
transitions = TRUE)
selector1_name
selector2_name
tooltip
tooltip = paste("instance_id = ", get_ids, "<br>x = ",
data$x, "<br>y = ", data$y)
data$x
get_ids
# convert data into llama format
#scenario_data = reactive(get_data(load_scenario()))
get_ids = scenario_data$data[unlist(scenario_data$test), scenario_data$ids]
get_ids
default_lines = data.frame(slope = c(0, Inf, 1), intercept = c(0, 0, 0),
stroke_width = 1, stroke_dasharray = 5)
# set up default directory for printing
path = "../example-inputs/SAT11-INDU/"
file1 = "../example-inputs/id.RData"
file2 = "../example-inputs/metrics.RData"
selector1 = create_model1(file_name = file1)
selector2 = create_model1(file_name = file2)
# function to load ASlib scenario
scenario_data = get_data("Custom", path = path, scenario_name = NULL)
# convert data into llama format
#scenario_data = reactive(get_data(load_scenario()))
get_ids = scenario_data$data[unlist(scenario_data$test), scenario_data$ids]
# compareSelectors.R
# Damir Pulatov
library(llama)
library(aslib)
library(scatterD3)
source("./helpers.R")
default_lines = data.frame(slope = c(0, Inf, 1), intercept = c(0, 0, 0),
stroke_width = 1, stroke_dasharray = 5)
# set up default directory for printing
path = "../example-inputs/SAT11-INDU/"
file1 = "../example-inputs/id.RData"
file2 = "../example-inputs/metrics.RData"
selector1 = create_model1(file_name = file1)
selector2 = create_model1(file_name = file2)
# function to load ASlib scenario
scenario_data = get_data("Custom", path = path, scenario_name = NULL)
# convert data into llama format
#scenario_data = reactive(get_data(load_scenario()))
get_ids = scenario_data$data[unlist(scenario_data$test), scenario_data$ids]
# compute metrics of interest
penalties1 = misclassificationPenalties(scenario_data, selector1)
penalties2 = misclassificationPenalties(scenario_data, selector2)
build_mcp = build_data(get_ids, penalties1, penalties2)
data = build_mcp
# compute mean mcp for each model
single_mcp = compute_metric(scenario_data, choice = "sbs",
method = "mcp")
virtual_mcp = compute_metric(scenario_data, choice = "vbs",
method = "mcp")
model1_mcp = mean(penalties1)
model2_mcp = mean(penalties2)
# compute gaps closed
model1_gap_mcp = compute_gap(model1_mcp, virtual_mcp, single_mcp)
model2_gap_mcp = compute_gap(model2_mcp, virtual_mcp, single_mcp)
tooltip = paste("instance_id = ", get_ids, "<br>x = ",
data$x, "<br>y = ", data$y)
# make names for selectors
selector1_name = file1
model1_gap_mcp
selector2_name = file2
make_par_title = paste("PAR10 Scores for ", selector1_name, " vs. ", selector2_name)
plot.text = paste("Misclassification Penalties for ", selector1_name, " vs. ", selector2_name)
title = paste("Misclassification Penalties")
# make scatterplot with misclassification penalties
plot1 = scatterD3(data = data, x = x, y = y, tooltip_text = tooltip,
tooltip_position = "top right",
xlab = selector1_name, ylab = selector2_name,
point_size = 100, point_opacity = 0.5,
hover_size = 3, hover_opacity = 1,
color = "purple",
lines = default_lines,
caption = list(text = plot.text,
title = title),
transitions = TRUE)
plot1
plot1
