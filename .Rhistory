layer_dense(units = 16L, activation = "relu") %>%
layer_dense(units = 1L, activation = "linear")
} else if (arch == "arch2") {
model = keras_model_sequential() %>%
layer_dense(units = 64L, input_shape = 10L, activation = "relu") %>%
layer_dense(units = 32L, activation = "relu") %>%
layer_dense(units = 1L, activation = "linear")
}
model %>%
compile(optimizer = optimizer_adam(lr),
loss = "binary_crossentropy",
metrics = "accuracy")
}
library("paradox")
ps = ParamSet$new(list(
ParamFct$new("arch", levels = c("arch1", "arch2"), tags = "train"),
ParamDbl$new("lr", lower = 10^-5, upper = 10^-2, tags = "train")
))
?ParamSet
ps$trafo = function(x, param_set) {
x$model = get_keras_model(x$arch, x$lr)
x$lr = x$arch = NULL
return(x)
}
library("mlr3tuning")
learner = lrn("regr.keras", callbacks = list(cb_es(patience = 3)))
task = mlr_tasks$get("mtcars")
resampling = rsmp("holdout")
measure = msr("regr.mse")
tuner = tnr("grid_search", resolution = 2)
terminator = trm("evals", n_evals = 4)
instance = TuningInstanceSingleCrit$new(
task = task,
learner = learner,
resampling = resampling,
measure = measure,
search_space = ps,
terminator = terminator
)
tuner$optimize(instance)
library("reticulate")
py_module_available("keras_radam")
kr = import("keras_radam")
py_install
py_install("keras_radam")
?install.packages
library(ada)
help("brnn")
rm(scale)
ls()
rm(task_
rm(task)
rm(graph)
q()
listLearners
mlr::listLearners()
mlr::listLearners()
mlr::listLearners()
mlr::listLearners()
a = listLearners("classif")
a
library(mlr)
a = listLearners("classif")
a
a = listLearners("classif")
a$installed
regr_learners = listLearners("regr", warn.missing.packages = FALSE)
regr_learners
# list of integrated learners and their mlr names
regr_learners = listLearners("regr", warn.missing.packages = FALSE)
s = regr_learners$name[regr_learners$installed]
s
# list of integrated learners and their mlr names
regr_list = listLearners("regr", warn.missing.packages = FALSE)
#regr_ids = grep("regr.", all_learners$class)
#regr_ids = regr_ids[all_learners[regr_ids, ]$installed]
regr_learners = regr_list$name[regr_list$installed]
regr_mlr = regr_list$class[regr_list$installed]
regr_mlr3
regr_mlr
classif_list = listLearners("classif", warn.missing.packages = FALSE)
classif_learners = classif_list$name[classif_list$installed]
classif_mlr = classif_list$class[classif_list$installed]
classif_mlr
classif_learners
shiny::runApp('aslib-dashboard')
# list of integrated learners and their mlr names
regr_list = listLearners("regr", warn.missing.packages = FALSE)
mlr::listLearners()
library(mlr)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
regr_learners = regr_list$name[regr_list$installed]
regr_mlr = regr_list$class[regr_list$installed]
classif_list = listLearners("classif", warn.missing.packages = FALSE)
classif_learners = classif_list$name[classif_list$installed]
classif_mlr = classif_list$class[classif_list$installed]
library(tidyr)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
regr_learners = regr_list$name[regr_list$installed]
regr_mlr = regr_list$class[regr_list$installed]
classif_list = listLearners("classif", warn.missing.packages = FALSE)
classif_learners = classif_list$name[classif_list$installed]
classif_mlr = classif_list$class[classif_list$installed]
?gather
requireNamespace(tidyr)
requireNamespace("tidyr")
data = gather(data, "method", "value", c(name1, name2))
data = tidyr::gather(data, "method", "value", c(name1, name2))
library(shiny)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
library(shiny)
library(mlr)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
library(tidyr)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
sessionInfo()
library(llama)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
library(shiny)
library(mlr)
library(llama)
library(aslib)
library(scatterD3)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
library(mlr)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
library(llama)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
library(mlr)
library(llama)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
help(llama)
library(mlr)
library(llama)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
listLearners()
tab = rbindlist(lapply(ids, function(id) {
makefuns = c("makeRLearnerClassif", "makeRLearnerMulticlass",
"makeRLearnerCluster", "makeRLearnerCostSens",
"makeRLearnerMultilabel", "makeRLearnerRegr",
"makeRLearnerSurv") # I hope I didn't forget any...
fun = getS3method("makeRLearner", id)
environment(fun) = new.env(parent = environment(fun))
for (mf in makefuns) {
environment(fun)[[mf]] = list
}
row = fun()
data.table(
id = row$cl,
name = row$name,
short.name = row$short.name,
package = list(stri_replace_first_regex(row$package, "^[!_]", "")),
properties = list(row$properties),
note = row$note %??% ""
)
}), use.names = TRUE)
tab = data.table::rbindlist(lapply(ids, function(id) {
makefuns = c("makeRLearnerClassif", "makeRLearnerMulticlass",
"makeRLearnerCluster", "makeRLearnerCostSens",
"makeRLearnerMultilabel", "makeRLearnerRegr",
"makeRLearnerSurv") # I hope I didn't forget any...
fun = getS3method("makeRLearner", id)
environment(fun) = new.env(parent = environment(fun))
for (mf in makefuns) {
environment(fun)[[mf]] = list
}
row = fun()
data.table(
id = row$cl,
name = row$name,
short.name = row$short.name,
package = list(stri_replace_first_regex(row$package, "^[!_]", "")),
properties = list(row$properties),
note = row$note %??% ""
)
}), use.names = TRUE)
ids = as.character(methods("makeRLearner"))
ids
ids = ids[!stri_detect_fixed(ids, "__mlrmocklearners__")]
tab = data.table::rbindlist(lapply(ids, function(id) {
makefuns = c("makeRLearnerClassif", "makeRLearnerMulticlass",
"makeRLearnerCluster", "makeRLearnerCostSens",
"makeRLearnerMultilabel", "makeRLearnerRegr",
"makeRLearnerSurv") # I hope I didn't forget any...
fun = getS3method("makeRLearner", id)
environment(fun) = new.env(parent = environment(fun))
for (mf in makefuns) {
environment(fun)[[mf]] = list
}
row = fun()
data.table(
id = row$cl,
name = row$name,
short.name = row$short.name,
package = list(stri_replace_first_regex(row$package, "^[!_]", "")),
properties = list(row$properties),
note = row$note %??% ""
)
}), use.names = TRUE)
library(mlr)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
library(rJava)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
library(parallelMap)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
library(ggplot2)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
library(checkmate)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
library(BBmisc)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
library(plyr)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
library(llama)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr")
help(llama)
ids = as.character(methods("makeRLearner"))
ids[10]
ids[1]
?rbindlist
fun = getS3method("makeRLearner", ids[1])
fun = getS3method("makeRLearner", ids[10])
?makeRLearner
l = makeLearner("")
ids
l = makeLearner("")
l = makeLearner("regr.featureless")
ids[1]
l = makeLearner("classif.ada")
install.packages("ada")
l = makeLearner("classif.ada")
l$properties
ids[10]
l = makeLearner("classif.constant")
l$properties
?rbindlist
help(data.table)
help("mlr-package")
listLearners()
library(mlr)
?update.packages
remove.packages("mlr")
install.packages("mlr")
install.packages("mlr")
help(mlr)
help(mlr)
library(mlr)
help(mlr)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
library(llama)
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
ids = as.character(methods("makeRLearner"))
ids
ids[10]
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
library(mlr)
ids = as.character(methods("makeRLearner"))
ids
ids[1-]
ids[10]
ids[11]
?methods
?stri_detect_fixxed
?stri_detect_fixed
library(stringi)
ids = ids[!stri_detect_fixed(ids, "__mlrmocklearners__")]
ids
ids[10]
ids = stri_replace_first_fixed(ids, "makeRLearner.", "")
ids[10]
ids[1]
l = makeLearner(ids[1])
l$properties
l = makeLearner(ids[10])
install.packages("party")
l = makeLearner(ids[10])
l$properties
# list of integrated learners and their mlr names
regr_list = mlr::listLearners("regr", warn.missing.packages = FALSE)
regr_list
colnames(regr_list)
remove.packages("mlr")
getwd()
devtools::install_local("open_source_contribute/mlr")
library(mlr)
# list of integrated learners and their mlr names
regr_list = listLearners("regr", warn.missing.packages = FALSE)
library(llama)
# list of integrated learners and their mlr names
regr_list = listLearners("regr", warn.missing.packages = FALSE)
library(llama)
remove.packages("llama")
install.packages("llama")
install.packages("llama")
devtools::install_github("https://github.com/cran/llama")
?rbindlist
library(data.table)
?rbindlist
library(llama)
# list of integrated learners and their mlr names
regr_list = listLearners("regr", warn.missing.packages = FALSE)
my_repos <- gh("GET /users/{username}/repos", username = "gaborcsardi")
library(gh)
my_repos <- gh("GET /users/{username}/repos", username = "gaborcsardi")
setwd("./aslib-dashboard/")
list.files("./data/aslib_data/")
list.dirs("./data/aslib_data/")
?list.dirs
list.dirs("./data/aslib_data/", all.files = FALSE)
list.files("./data/aslib_data/", all.files = FALSE)
ds.dirs = list.files("./data/aslib_data/", all.files = FALSE)
ds.dirs = ds.dirs[!str_detect(ds.dirs, "README")]
?str_detect
library(stringr)
ds.dirs = ds.dirs[!str_detect(ds.dirs, "README")]
ds.dirs
length(ds.dirs)
ds.dirs = list.files("./data/aslib_data/", all.files = FALSE)
!grep(ds.dirs, "README")
!grep("README", ds.dirs)
grep("README", ds.dirs)
grep("README", ds.dirs)
gsub("README", "", ds.dirs)
gsub("README.md", "", ds.dirs)
ds.dirs[ds.dirs == "README.md"]
ds.dirs[ds.dirs == "README.md"] = NULL
ds.dirs[ds.dirs == "README.md"]
ds.dirs == "README.md"
match(ds.dirs, "README.md")
ds.dirs[match(ds.dirs, "README.md")]
match("README.md", ds.dirs)
ds.dirs[match("README.md", ds.dirs)] = NULL
ds.dirs[21] = NULL
help(BBmisc)
library(BBmisc)
help(BBmisc)
?BBmisc
ds.dirs = ds.dirs[!str_detect(ds.dirs, "README.md")]
ds.dirs
# list of ASlib scenarios
ds.dirs = list.files("./data/aslib_data/", all.files = FALSE)
ds.dirs
# list of ASlib scenarios
ds.dirs = list.files("./data/aslib_data/", all.files = FALSE, full.names = TRUE)
dirs.dirs
ds.dirs
# list of ASlib scenarios
ds.dirs = list.files("./data/aslib_data/", all.files = FALSE, full.names = TRUE)
ds.dirs = ds.dirs[!str_detect(ds.dirs, "README.md")]
ds.dirs''
ds.dirs'
ds.dirs
ds.dirs
# list of ASlib scenarios
full_dirs = list.files("./data/aslib_data/", all.files = FALSE, full.names = TRUE)
full_dirs = full_dirs[!str_detect(full_dirs, "README.md")]
full_dirs
# list of ASlib scenarios
full_sc = list.files("./data/aslib_data/", all.files = FALSE, full.names = TRUE)
full_sc = full_sc[!str_detect(full_sc, "README.md")]
short_sc = full_sc
short_sc = gsub("*/, "", short_sc)
short_sc = gsub("*/", "", short_sc)
short_sc
head(full_sc)
short_sc = gsub(".*/", "", short_sc)
short_sc = gsub(".*/", "", full_sc)
head(short_sc)
getwd()
shiny::runApp()
shiny::runApp()
list.files()
list.files("./project")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
full_sc
prefix = sub(".*/", "", full_sc)
prefix
prefix = sub("/.*", "", full_sc)
prefix
runApp()
classif_list = listLearners("classif", warn.missing.packages = FALSE)
classif_learners = classif_list$name[classif_list$installed]
classif_learners
classif_list = listLearners("classif", warn.missing.packages = FALSE)
classif_learners
a = listLearners(warn.missing.packages = FALSE)
a
a$class
a$name
a$name[10]
a$class[10]
makeLearner(a$class[10])
a$package
a$package == "llama"
sum(a$package == "llama")
a[a$package == "llama", ]
# list of integrated learners and their mlr names
regr_list = listLearners("regr", warn.missing.packages = FALSE)
regr_list = regr_list[!regr_list$package == "llama"]
regr_list = regr_list[!regr_list$package == "llama", ]
# list of integrated learners and their mlr names
regr_list = listLearners("regr", warn.missing.packages = FALSE)
regr_list = regr_list[!regr_list$package == "llama", ]
regr_learners = regr_list$name[regr_list$installed]
regr_mlr = regr_list$class[regr_list$installed]
classif_list = listLearners("classif", warn.missing.packages = FALSE)
classif_list[10]
classif_list[10, ]
classif_list = classif_list[!classif_list == "llama", ]
classif_list[10, ]
classif_list = classif_list[!classif_list$package == "llama", ]
classif_list[10, ]
runApp()
makeLearner(NA)
cat(NA)
makeLearner(NULL)
runApp()
runApp()
runApp()
runApp()
runApp()
if (interactive()) {
shinyApp(
ui = basicPage(
numericInput("num", label = "Make changes", value = 1),
submitButton("Update View", icon("refresh")),
helpText("When you click the button above, you should see",
"the output below update to reflect the value you",
"entered at the top:"),
verbatimTextOutput("value")
),
server = function(input, output) {
# submit buttons do not have a value of their own,
# they control when the app accesses values of other widgets.
# input$num is the value of the number widget.
output$value <- renderPrint({ input$num })
}
)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?isolate
runApp()
runApp()
runApp()
runApp()
cat(NA)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?req
runApp()
runApp()
