data
llama.cv = convertToLlamaCVFolds(sc)
data = fixFeckingPresolve(sc, llama.cv)
head(data$data)
getwd()
load("./shiny-selectors/example-inputs/id.RData")
s1 = combined_model
s1
create_model(type == "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = data)
create_model(type = "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = data)
create_model(type = "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = NULL)
learner = makeImputeWrapper(learner = setHyperPars(makeLearner("regr.featureless")),
classes = list(numeric = imputeMean(), integer = imputeMean(), logical = imputeMode(),
factor = imputeConstant("NA"), character = imputeConstant("NA")))
learner
model = regression(learner,data)
model
model$models
model
model$predictions
s1
s1$predictions
typeof(s1$predictions)
class(s1$predictions)
class(model$predictions)
runApp('shiny-selectors/experiments/changingTemp.R')
?req
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
data
print(data())
runApp('shiny-selectors/experiments/over.R')
runApp('over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
head(data$data$nvarsOrig)
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
typeof(data)
class(data)
class(sc)
class(sc$desc)
class(data$data)
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
install.packages('htmlwidgets')
install.packages("htmlwidgets")
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
library(RWeka)
sessionInfo()
install.packages("RWekajars")
install.packages("RWekajars")
library(RWeka)
sessionInfo()
library(rJava)
sessionInfo()
install.packages("rJava")
install.packages("rJava")
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
library(aslib)
sc = getCosealASScenario("SAT11-INDU")
shiny::runApp('aslib-dashboard')
sc = getCosealASScenario("SAT11-INDU")
summarizeAlgoPerf(sc, sc$desc$performance_measures)
print(summarizeAlgoPerf(sc, sc$desc$performance_measures))
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
plotAlgoPerfBoxplots(sc, sc$desc$performance_measures)
plotAlgoPerfCDFs(sc, sc$desc$performance_measures)
plotAlgoPerfDensities(sc, sc$desc$performance_measures)
plotAlgoPerfScatterMatrix(sc, sc$desc$performance_measures)
plotAlgoPerfDensities(sc, sc$desc$performance_measures)
plotAlgoPerfCDFs(sc, sc$desc$performance_measures)
plotAlgoPerfBoxplots(sc, sc$desc$performance_measures)
runApp('aslib-dashboard')
runApp('aslib-dashboard')
r2d3::r2d3("workshops/learn-d3/d3.R", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
//
var barHeight = Math.ceil(height / data.length);
svg.selectAll('rect')
.data(data)
r2d3::r2d3("workshops/learn-d3/d3-r.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
shiny::runApp('aslib-dashboard/project')
runApp('aslib-dashboard/project')
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
?r2d3
getwd()
setwd("./aslib-dashboard/d3-plot/")
# testing r2d3
load("../data/id.RData")
model1 = combined_model
load("../data/metrics.RData")
model2 = combined_model
shiny::runApp('aslib-dashboard')
getwd()
help(cluster)
??cluster
library(cluster)
help(cluster)
??cluster
?cluster
?plot.silhouette
plot.partition
?plot.partition
library(mlr3)
library(mlr3cluster)
task = tsk("usarrests")
x = task$data()
mod = pam(x, 2)
plot(mod)
plot(mod)
typeof(mod)
class(mod)
?clusplot
x <- rbind(cbind(rnorm(10,0,0.5), rnorm(10,0,0.5)),
cbind(rnorm(15,5,0.5), rnorm(15,5,0.5)))
x
clusplot(pam(x, 2))
>plot
?plot
plot(pam(x, 2))
clusplot(pam(x, 2))
head(x)
library(mlr3)
library(mlr3cluster)
library(mlr3cluster)
library(mlr3pipelines)
scale = mlr_pipeops$get("scale")
graph = Graph$new()$add_pipeop(scale)
task = mlr_tasks$get("usarrests")
graph$train(task)
task = mlr_tasks$get("iris")
graph$train(task)
reticulate::repl_python()
library(reticulate)
use_condaenv("keras")
reticulate::repl_python()
install.packages("keras")
install_keras()
library(keras)
install_keras()
library(keras)
install_keras()
library(keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
mnist
x_train
# reshape
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
# rescale
x_train <- x_train / 255
x_test <- x_test / 255
x_train
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 10, activation = 'softmax')
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 10, activation = 'softmax')
model
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
summary(model)
history <- model %>% fit(
x_train, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history <- model %>% fit(
x_train, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
library(keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
# reshape
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
# rescale
x_train <- x_train / 255
x_test <- x_test / 255
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 10, activation = 'softmax')
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history <- model %>% fit(
x_train, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
plot(history)
model %>% evaluate(x_test, y_test)
model %>% predict_classes(x_test)
model
model %>% predict_classes(x_test)
devtools::install_github("https://github.com/mlr-org/mlr3keras.git")
library(mlr3keras)
vignette(mlr3keras)
vignette("mlr3keras")
library("mlr3")
library("mlr3keras")
# Instantiate Learner
lrn = LearnerClassifKerasFF$new()
lrn
help("mlr3keras")
# Set hyperparameters
lrn$param_set$values$epochs = 50
lrn$param_set$values$layer_units = c(12, 30)
# Train and predict
lrn$train(mlr_tasks$get("iris"))
lrn$predict(mlr_tasks$get("iris"))
library("keras")
model = keras_model_sequential() %>%
layer_dense(units = 12L, input_shape = 8L, activation = "relu") %>%
layer_dense(units = 12L, activation = "relu") %>%
layer_dense(units = 1L, activation = "sigmoid") %>%
compile(optimizer = optimizer_adam(3*10^-4),
loss = "binary_crossentropy",
metrics = "accuracy")
library(mlr3pipelines)
po_imp = PipeOpImputeMedian$new()
po_lrn = PipeOpLearner$new(lrn("classif.keras"))
po_lrn$param_set$values$model = model
po_lrn
?LearnerClassifKeras
po_lrn$param_set
po_lrn$param_set$values$epochs = 10L
pipe = po_imp %>>% po_lrn
pipe$train(mlr_tasks$get("pima"))
pipe$pipeops$classif.keras
get_keras_model = function(arch = "arch1", lr = 3*10^-4) {
if (arch == "arch1") {
model = keras_model_sequential() %>%
layer_dense(units = 16L, input_shape = 10L, activation = "relu") %>%
layer_dense(units = 16L, activation = "relu") %>%
layer_dense(units = 1L, activation = "linear")
} else if (arch == "arch2") {
model = keras_model_sequential() %>%
layer_dense(units = 64L, input_shape = 10L, activation = "relu") %>%
layer_dense(units = 32L, activation = "relu") %>%
layer_dense(units = 1L, activation = "linear")
}
model %>%
compile(optimizer = optimizer_adam(lr),
loss = "binary_crossentropy",
metrics = "accuracy")
}
?RNGkind
library("mlr3")
library("mlr3keras")
?LearnerClassifKerasFF
# Set hyperparameters
lrn$param_set$values$epochs = 50
# Instantiate Learner
lrn = LearnerClassifKerasFF$new()
# Set hyperparameters
lrn$param_set$values$epochs = 50
lrn$param_set$values$layer_units = c(12, 30)
lrn
# Train and predict
lrn$train(mlr_tasks$get("iris"))
lrn$plot
lrn$plot()
library("keras")
model = keras_model_sequential() %>%
layer_dense(units = 12L, input_shape = 8L, activation = "relu") %>%
layer_dense(units = 12L, activation = "relu") %>%
layer_dense(units = 1L, activation = "sigmoid") %>%
compile(optimizer = optimizer_adam(3*10^-4),
loss = "binary_crossentropy",
metrics = "accuracy")
library(mlr3pipelines)
po_imp = PipeOpImputeMedian$new()
po_lrn = PipeOpLearner$new(lrn("classif.keras"))
po_lrn$param_set$values$model = model
po_lrn$param_set$values$epochs = 10L
pipe = po_imp %>>% po_lrn
pipe$train(mlr_tasks$get("pima"))
pipe$pipeops$classif.keras
get_keras_model = function(arch = "arch1", lr = 3*10^-4) {
if (arch == "arch1") {
model = keras_model_sequential() %>%
layer_dense(units = 16L, input_shape = 10L, activation = "relu") %>%
layer_dense(units = 16L, activation = "relu") %>%
layer_dense(units = 1L, activation = "linear")
} else if (arch == "arch2") {
model = keras_model_sequential() %>%
layer_dense(units = 64L, input_shape = 10L, activation = "relu") %>%
layer_dense(units = 32L, activation = "relu") %>%
layer_dense(units = 1L, activation = "linear")
}
model %>%
compile(optimizer = optimizer_adam(lr),
loss = "binary_crossentropy",
metrics = "accuracy")
}
library("paradox")
ps = ParamSet$new(list(
ParamFct$new("arch", levels = c("arch1", "arch2"), tags = "train"),
ParamDbl$new("lr", lower = 10^-5, upper = 10^-2, tags = "train")
))
?ParamSet
ps$trafo = function(x, param_set) {
x$model = get_keras_model(x$arch, x$lr)
x$lr = x$arch = NULL
return(x)
}
library("mlr3tuning")
learner = lrn("regr.keras", callbacks = list(cb_es(patience = 3)))
task = mlr_tasks$get("mtcars")
resampling = rsmp("holdout")
measure = msr("regr.mse")
tuner = tnr("grid_search", resolution = 2)
terminator = trm("evals", n_evals = 4)
instance = TuningInstanceSingleCrit$new(
task = task,
learner = learner,
resampling = resampling,
measure = measure,
search_space = ps,
terminator = terminator
)
tuner$optimize(instance)
library("reticulate")
py_module_available("keras_radam")
kr = import("keras_radam")
py_install
py_install("keras_radam")
setwd("./aslib-dashboard/")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?gather
shiny::runApp()
ids
getwd()
scenario_load = parseASScenario("./data/aslib_scenarios/SAT11-INDU/")
scenario_data = convertToLlamaCVFolds(scenario_load)
ids = get_ids(scenario_data)
load("./data/metrics.RData")
s1 = combined_model
load("./data/id.RData")
s2 = combined_model
m1 = compute_metric(scenario_data, "mcp", s1)
m2 = compute_metric(scenario_data, "mcp", s2)
d = cons_data(ids, m1, m2, "n1", "n2")
# build data for box plot
cons_data = function(ids, m1, m2, name1, name2) {
data = data.frame(instance_id = ids, x = m1, y = m2)
data = c("instance_id", name1, name2)
data = melt(data, "method", "value", c(name1, name2))
return(data)
}
d = cons_data(ids, m1, m2, "n1", "n2")
library(reshape2)
d = cons_data(ids, m1, m2, "n1", "n2")
d
data = data.frame(instance_id = ids, x = m1, y = m2)
data = c("instance_id", name1, name2)
name1 = "n1"
name2 = "n2"
data = c("instance_id", name1, name2)
head(data)
data
m1
data = data.frame(instance_id = ids, x = m1, y = m2)
head(data)
colnames(data) = c("instance_id", name1, name2)
data = melt(data, "method", "value", c(name1, name2))
colnames(data) = c("instance_id", name1, name2)
data = gather(data, "method", "value", c(name1, name2))
head(data)
runApp()
head(data)
data = data.frame(instance_id = ids, x = m1, y = m2)
colnames(data) = c("instance_id", name1, name2)
data = gather(data, "method", "value", c(name1, name2))
head(data)
colnames(data)
runApp()
head(data)
plot = plot_ly(data = data, x = ~method, y = ~value, type = "box",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
hovertemplate = 'solver: %{x}<br>value: %{y:.3f}</br><extra></extra>',
showlegend = FALSE) %>% onRender("
function(el, x) {
Plotly.d3.select('.cursor-crosshair').style('cursor', 'default')
}
")
plot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?cv
runApp()
head(data)
data[method == "n1"]
data[method == "n1", ]
data["method" == "n1", ]
data["method" == "n1"]
data[, "method" == "n1"]
head(data)
data[, method == "n1"]
data[, data$method == "n1"]
data[data$method == "n1"]
data[data$method == "n1", ]
name1 = "n1"
data[data$method == name1, ]
m1 = data[data$method == name1, ]
head(m1)
m1 = data[data$method == name1, ]$method
head(m1)
m1 = data[data$method == name1, ]$value
head(m1)
mean(m1)
runApp()
runApp()
