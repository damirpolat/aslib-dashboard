req(scenario_data())
return(get_vbs(scenario_data()))
})
names = reactiveValues(selector1_regr_name = NULL,
selector2_regr_name = NULL,
selector1_classif_name = NULL,
selector2_classif_name = NULL,
selector1_custom_name = NULL,
selector2_custom_name = NULL,
selector1_cons = NULL,
selector2_cons = NULL)
# function to load ASlib scenario
load_scenario = eventReactive(input$run, {
read_scenario(input$scenario_type, global$datapath, input$scenario)
})
# convert data into llama format
scenario_data = reactive(get_data(load_scenario()))
ids = reactive(get_ids(scenario_data()))
# store metric selection
metric = reactive(input$metric)
metric_cons = reactive(input$metric_cons)
}
shinyApp(ui, server)
library(aslib)
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(aslib)
library(llama)
library(mlr)
source("./helpers.R")
ui = dashboardPage(
dashboardHeader(title = "Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Input", tabName = "inputs", icon = icon("file-import"))
)
),
dashboardBody(
useShinyjs(),
tabItems(
# input tab
tabItem(tabName = "inputs",
fluidRow(
column(3,
uiOutput("scenario_loader"),
uiOutput("selector1_loader"),
uiOutput("selector2_loader"),
actionButton("run", "Run!")
),
column(width = 2,
selectInput("scenario_type", label = h4(strong("Scenario source")),
choices = c("ASlib", "Custom")),
selectInput("selector1_type", label = h4(strong("Selector type")),
choices = c("regression", "classification", "custom")),
selectInput("selector2_type", label = h4(strong("Selector type")),
choices = c("regression", "classification", "custom"))
)
),
# summary
column(width = 4,
htmlOutput("scenario_title"),
verbatimTextOutput("scenario_summary")
),
column(width = 8, offset = 0,
htmlOutput("perf_title"),
DT::dataTableOutput("algo_perf"), style = "overflow-y: scroll;overflow-x: scroll;"
)
)
)
)
)
server = function(input, output) {
# dynamic UI for selecting scenarios
output$scenario_loader = renderUI({
switch(input$scenario_type,
"ASlib" = selectInput("scenario", label = h4(strong("Type ASlib scenario")),
choices = short_sc)
)
})
# dynamic UI for selecting selectors
output$selector1_loader = renderUI({
switch(input$selector1_type,
"regression" = selectInput("learner1", label = h4(strong("Select learner by name")),
choices = regr_learners),
"classification" = selectInput("learner1", label = h4(strong("Select learner by name")),
choices = classif_learners),
"custom" = list(
fileInput("selector1_upload", label = h4(strong("Upload selector results")),
accept = c(".RData", ".rds")))
)
})
# dynamic UI for selecting selectors
output$selector2_loader = renderUI({
switch(input$selector2_type,
"regression" = selectInput("learner2", label = h4(strong("Select learner by name")),
choices = regr_learners),
"classification" = selectInput("learner2", label = h4(strong("Select learner by name")),
choices = classif_learners),
"custom" =  list(
fileInput("selector2_upload", label = h4(strong("Upload selector results")),
accept = c(".RData", ".rds")))
)
})
# scenario summary
output$scenario_summary = renderPrint({
req(load_scenario())
print(load_scenario())
})
output$scenario_title = renderUI({
req(load_scenario())
h4(strong("Scenario summary"))
})
# algorithm summaries
output$algo_perf = renderDataTable({
req(load_scenario())
datatable(summarizeAlgoPerf(load_scenario(), load_scenario()$desc$performance_measures),
height = '70px', options = list(paging = TRUE, pageLength = 8,
lengthMenu = c(8, 16, 24, 32, 40)))
})
output$perf_title = renderUI({
req(load_scenario())
h4(strong(paste("Algorithm Summary for", load_scenario()$desc$scenario_id)))
})
results = reactiveValues(data = NULL, errors = NULL, box_data = NULL)
selectors = reactiveValues(learner1 = NULL,
learner2 = NULL,
file1 = NULL,
file2 = NULL)
# get names of learners
observeEvent(input$run, {
req(input$learner1)
selectors$learner1 = input$learner1
})
observeEvent(input$run, {
req(input$learner2)
selectors$learner2 = input$learner2
})
observeEvent(input$run, {
req(input$selector1_upload)
selectors$file1 = input$selector1_upload
})
observeEvent(input$run, {
req(input$selector2_upload)
selectors$file2 = input$selector2_upload
})
# build selectors
selector1 = reactive({
if(input$selector1_type == "custom") {
req(selectors$file1)
return(read_model(file_name = selectors$file1))
} else {
req(selectors$learner1)
return(create_model(type = input$selector1_type,
learner_name = selectors$learner1,
data = scenario_data()))
}
})
selector2 = reactive({
if(input$selector2_type == "custom") {
req(selectors$file2)
return(read_model(file_name = selectors$file2))
} else {
req(selectors$learner2)
return(create_model(type = input$selector2_type,
learner_name = selectors$learner2,
data = scenario_data()))
}
})
# get single best and virtual best solvers
sbs = reactive({
req(scenario_data())
return(get_sbs(scenario_data()))
})
vbs = reactive({
req(scenario_data())
return(get_vbs(scenario_data()))
})
names = reactiveValues(selector1_regr_name = NULL,
selector2_regr_name = NULL,
selector1_classif_name = NULL,
selector2_classif_name = NULL,
selector1_custom_name = NULL,
selector2_custom_name = NULL,
selector1_cons = NULL,
selector2_cons = NULL)
# function to load ASlib scenario
load_scenario = eventReactive(input$run, {
read_scenario(input$scenario_type, global$datapath, input$scenario)
})
# convert data into llama format
scenario_data = reactive(get_data(load_scenario()))
ids = reactive(get_ids(scenario_data()))
# store metric selection
metric = reactive(input$metric)
metric_cons = reactive(input$metric_cons)
}
shinyApp(ui, server)
library(DT)
shinyApp(ui, server)
ui = dashboardPage(
dashboardHeader(title = "Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Input", tabName = "inputs", icon = icon("file-import"))
)
),
dashboardBody(
useShinyjs(),
tabItems(
# input tab
tabItem(tabName = "inputs",
fluidRow(
column(3,
uiOutput("scenario_loader"),
uiOutput("selector1_loader"),
uiOutput("selector2_loader"),
actionButton("run", "Run!")
),
column(width = 2,
selectInput("scenario_type", label = h4(strong("Scenario source")),
choices = c("ASlib", "Custom")),
selectInput("selector1_type", label = h4(strong("Selector type")),
choices = c("regression", "classification", "custom")),
selectInput("selector2_type", label = h4(strong("Selector type")),
choices = c("regression", "classification", "custom"))
)
),
# summary
column(width = 4,
htmlOutput("scenario_title"),
verbatimTextOutput("scenario_summary")
),
column(width = 8, offset = 0,
htmlOutput("perf_title"),
DT::dataTableOutput("algo_perf"), style = "overflow-y: scroll;overflow-x: scroll;"
)
)
)
)
)
server = function(input, output) {
# dynamic UI for selecting scenarios
output$scenario_loader = renderUI({
switch(input$scenario_type,
"ASlib" = selectInput("scenario", label = h4(strong("Type ASlib scenario")),
choices = short_sc)
)
})
# dynamic UI for selecting selectors
output$selector1_loader = renderUI({
switch(input$selector1_type,
"regression" = selectInput("learner1", label = h4(strong("Select learner by name")),
choices = regr_learners),
"classification" = selectInput("learner1", label = h4(strong("Select learner by name")),
choices = classif_learners),
"custom" = list(
fileInput("selector1_upload", label = h4(strong("Upload selector results")),
accept = c(".RData", ".rds")))
)
})
# dynamic UI for selecting selectors
output$selector2_loader = renderUI({
switch(input$selector2_type,
"regression" = selectInput("learner2", label = h4(strong("Select learner by name")),
choices = regr_learners),
"classification" = selectInput("learner2", label = h4(strong("Select learner by name")),
choices = classif_learners),
"custom" =  list(
fileInput("selector2_upload", label = h4(strong("Upload selector results")),
accept = c(".RData", ".rds")))
)
})
# scenario summary
output$scenario_summary = renderPrint({
req(load_scenario())
print(load_scenario())
})
output$scenario_title = renderUI({
req(load_scenario())
h4(strong("Scenario summary"))
})
# algorithm summaries
output$algo_perf = renderDataTable({
req(load_scenario())
datatable(summarizeAlgoPerf(load_scenario(), load_scenario()$desc$performance_measures),
height = '70px', options = list(paging = TRUE, pageLength = 8,
lengthMenu = c(8, 16, 24, 32, 40)))
})
output$perf_title = renderUI({
req(load_scenario())
h4(strong(paste("Algorithm Summary for", load_scenario()$desc$scenario_id)))
})
results = reactiveValues(data = NULL, errors = NULL, box_data = NULL)
selectors = reactiveValues(learner1 = NULL,
learner2 = NULL,
file1 = NULL,
file2 = NULL)
# get names of learners
shinyjs::onclick("run", {
req(input$learner1)
selectors$learner1 = input$learner1
})
shinyjs::onclick("run", {
req(input$learner2)
selectors$learner2 = input$learner2
})
shinyjs::onclick("run", {
req(input$selector1_upload)
selectors$file1 = input$selector1_upload
})
shinyjs::onclick("run", {
req(input$selector2_upload)
selectors$file2 = input$selector2_upload
})
# build selectors
selector1 = reactive({
if(input$selector1_type == "custom") {
req(selectors$file1)
return(read_model(file_name = selectors$file1))
} else {
req(selectors$learner1)
return(create_model(type = input$selector1_type,
learner_name = selectors$learner1,
data = scenario_data()))
}
})
selector2 = reactive({
if(input$selector2_type == "custom") {
req(selectors$file2)
return(read_model(file_name = selectors$file2))
} else {
req(selectors$learner2)
return(create_model(type = input$selector2_type,
learner_name = selectors$learner2,
data = scenario_data()))
}
})
# get single best and virtual best solvers
sbs = reactive({
req(scenario_data())
return(get_sbs(scenario_data()))
})
vbs = reactive({
req(scenario_data())
return(get_vbs(scenario_data()))
})
names = reactiveValues(selector1_regr_name = NULL,
selector2_regr_name = NULL,
selector1_classif_name = NULL,
selector2_classif_name = NULL,
selector1_custom_name = NULL,
selector2_custom_name = NULL,
selector1_cons = NULL,
selector2_cons = NULL)
# function to load ASlib scenario
load_scenario = eventReactive(input$run, {
read_scenario(input$scenario_type, global$datapath, input$scenario)
})
# convert data into llama format
scenario_data = reactive(get_data(load_scenario()))
ids = reactive(get_ids(scenario_data()))
# store metric selection
metric = reactive(input$metric)
metric_cons = reactive(input$metric_cons)
}
shinyApp(ui, server)
library(shiny)
shiny::shinyAppDir(".")
shiny::shinyAppDir(".")
shiny::shinyAppDir(".")
shiny::shinyAppDir(".")
setwd("~/aslib-dashboard/")
runApp()
runApp()
runApp()
runApp()
library(shiny)
shiny::shinyAppDir("./project")
shiny::shinyAppDir("./project")
shiny::shinyAppDir("./project")
shiny::shinyAppDir("./project")
shiny::shinyAppDir("./project")
getwd()
shiny::shinyAppDir("./project")
shiny::shinyAppDir("./project")
shiny::shinyAppDir("./project")
shiny::shinyAppDir("./project")
shiny::shinyAppDir("./project")
shiny::shinyAppDir("./project")
shiny::shinyAppDir("./project")
getwd()
shiny::shinyAppDir("./project")
shiny::shinyAppDir("./project")
shiny::shinyAppDir("./project")
setwd("~/learn-to-shine/onclick-multiple/")
library(shiny)
library(shinydashboard)
library(shinyjs)
library(maps)
library(mapproj)
ui = dashboardPage(
dashboardHeader(title = "ASlib Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Input", tabName = "inputs", icon = icon("file-import"))
)
),
dashboardBody(
useShinyjs(),
tabItems(
# input tab
tabItem(tabName = "inputs",
fluidRow(
column(width = 2,
selectInput("scenario_type", label = h4(strong("Scenario source")),
choices = c("ASlib", "Custom")),
selectInput("selector1_type", label = h4(strong("Selector type")),
choices = c("regression", "classification", "custom")),
actionButton("run", "run")
)
)
)
)
)
)
# Server logic ----
server = function(input, output) {
# dynamic UI for selecting scenarios
output$scenario_loader = renderUI({
switch(input$scenario_type,
"ASlib" = textInput("scenario", label = h4(strong("Type ASlib scenario")),
placeholder = "ex. SAT11-INDU", value = "SAT11-INDU")
)
})
# dynamic UI for selecting selectors
output$selector1_loader = renderUI({
switch(input$selector1_type,
"regression" = selectInput("learner1", label = h4(strong("Select learner by name")),
choices = c("regr_learners")),
"classification" = selectInput("learner1", label = h4(strong("Select learner by name")),
choices = c("classif_learners"))
)
})
# get names of learners
shinyjs::onclick("run", {
cat("running")
})
}
# Run app ----
shinyApp(ui, server)
ui = dashboardPage(
dashboardHeader(title = "ASlib Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Input", tabName = "inputs", icon = icon("file-import"))
)
),
dashboardBody(
useShinyjs(),
tabItems(
# input tab
tabItem(tabName = "inputs",
fluidRow(
column(width = 2,
selectInput("scenario_type", label = h4(strong("Scenario source")),
choices = c("ASlib", "Custom")),
selectInput("selector1_type", label = h4(strong("Selector type")),
choices = c("regression", "classification", "custom")),
actionButton("run", "run")
)
)
)
)
)
)
# Server logic ----
server = function(input, output) {
# dynamic UI for selecting scenarios
output$scenario_loader = renderUI({
switch(input$scenario_type,
"ASlib" = textInput("scenario", label = h4(strong("Type ASlib scenario")),
placeholder = "ex. SAT11-INDU", value = "SAT11-INDU")
)
})
# dynamic UI for selecting selectors
output$selector1_loader = renderUI({
switch(input$selector1_type,
"regression" = selectInput("learner1", label = h4(strong("Select learner by name")),
choices = c("regr_learners")),
"classification" = selectInput("learner1", label = h4(strong("Select learner by name")),
choices = c("classif_learners"))
)
})
# get names of learners
shinyjs::onclick("run", {
cat("running")
})
shinyjs::onclick("run", {
cat("\nstopping")
})
}
# Run app ----
shinyApp(ui, server)
getwd()
setwd("~/aslib-dashboard/")
runApp()
library(shiny)
shiny::shinyAppDir("./project")
shiny::shinyAppDir("./project")
getwd()
