scenarioLeftSolver$algo.runs = subset(scenarioLeftSolver$algo.runs, scenarioLeftSolver$algo.runs$algorithm == solver)
scenarioLeftSolver$algo.runstatus = select(scenarioLeftSolver$algo.runstatus, c("instance_id", "repetition", solver))
#leave on solver from metrics
metricsLeftSolver = subset(metrics, metrics$algorithm == solver)
llama.cv.solver = convertToLlamaCVFolds(scenarioLeftSolver)
data.solver = llama.cv.solver
data.solver$train = list(llama.cv.solver$train[[fold.n]])
data.solver$test = list(llama.cv.solver$test[[fold.n]])
solverLeft.preds = regressionLeftSolver(model = rest.model$models, data = data.solver, train.data = llama.cv, train.metrics = metricsLeaveOne,
new.metrics = metricsLeftSolver, measure = scenarioLeftSolver$desc$performance_measures)
solver.preds = list(solverLeft = solverLeft.preds, rest.model = rest.model)
return(solver.preds)
}
#train
outer.preds = trainModel(llama.cv, learner, inputData$metrics, n.inner.folds, timeout, rs.iters, par.set, inputData$scenario, fold.n, solver.n)
outer.preds
combined_model = outer.preds$solverLeft
combined_model = outer.preds$solverLeft
test.preds = outer.preds$solverLeft$test.predictions
test.preds
test.model = outer.preds$solverLeft
test.model$train.predictions = NULL
test.model$test.predictions = NULL
test.model$predictions = test.preds
combined_model
combined_model$test.predictions
# sort predictions
if(inputData$scenario$desc$maximize[[inputData$scenario$desc$performance_measures]]) {
test.model$predictions = test.model$predictions[order(test.model$predictions$instance_id, -test.model$predictions$score)]
} else {
test.model$predictions = test.model$predictions[order(test.model$predictions$instance_id, test.model$predictions$score)]
}
combined_model = list(test.model = test.model)
rest.model = outer.preds$rest.model$models
names = inputData$metrics$algorithm[[solver.n]]
rest.model = setNames(rest.model, names)
rest.model$predictions = outer.preds$rest.model$predictions
rest.model$predictions
combined_model$test.model$predictions
combined_model$test.model
getwd()
opt$save = "./manual-folds-manual-solvers/"
save(combined_model, file = sprintf("%s/proposed_leave_one_out_%s_%s_%s.RData", opt$save, inputData$scenario$desc$scenario_id, solver.n, fold.n))
save(rest.model, file = sprintf("%s/proposed_leave_one_out_rest_%s_%s_%s.RData", opt$save, inputData$scenario$desc$scenario_id, solver.n, fold.n))
combined_model$test.model$predictions
unqiue(combined_model$test.model$predictions$algorithm)
unique(combined_model$test.model$predictions$algorithm)
rest.model$predictions
library(shiny); runApp('learn-to-shine/compareSelectors.R')
library(shiny)
library(mlr)
library(llama)
library(aslib)
runApp('learn-to-shine/compareSelectors.R')
library(shiny)
library(mlr)
library(llama)
library(aslib)
library(ggplot2)
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
library(plotly)
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
runApp('learn-to-shine/compareSelectors.R')
library(shiny); runApp('learn-to-shine/compare-selectors/compareSelectors.R')
?deparse
?substitute
x = "mpg"
data = mtcars
head(data)
x = mpg
x = deparse(substitute(mpg))
x
substitute(mpg)
runApp('learn-to-shine/compare-selectors/compareSelectors.R')
is.list
?is.list
caption = list(text = "sometext", title = "some title")
caption
caption$text
l = function() { paste ("here") }
caption = list(text = l(), title = "some title")
caption
deparse(substitute(l()))
deparse(substitute(l)
)
deparse(substitute(l))
runApp('learn-to-shine/compare-selectors/compareSelectors.R')
runApp('learn-to-shine/compare-selectors/compareSelectors.R')
l = "l"
t = "t"
cap = list(t = t, l = l)
cap
digest::digest(get(cap), algo = sha256)
digest::digest(get(cap), algo = "sha256")
digest::digest(get(cap$t), algo = "sha256")
names(cap)
runApp('learn-to-shine/compare-selectors/compareSelectors.R')
runApp('learn-to-shine/compare-selectors/modules')
runApp('learn-to-shine/compare-selectors/compareSelectors.R')
shiny::runApp('shiny-selectors/modules')
switch(source$scenario_type(),
"ASlib" = textInput("scenario", label = h4(strong("Type ASlib scenario")),
placeholder = "ex. SAT11-INDU", value = "SAT11-INDU"),
"Custom" =  list(shinyDirButton("scenario_upload", label = "Upload scenario",
"Select directory with scenario"),
verbatimTextOutput("scenario_dir", placeholder = TRUE))
)
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp()
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules')
sc = getCosealASScenario("SAT11-INDU")
summary(sc)
runApp('shiny-selectors/modules')
read_scenario(input$scenario_type, global$datapath, input$scenario)
runApp('shiny-selectors/modules')
runApp('shiny-selectors/modules-learner')
?shinyDirChoose
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
?fileInput
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
?load
ls()
var_name = "sc"
?deparse
v = deparse(var_name)
v
v = deparse(eval(var_name))
v
v =  deparse(substitute(var_name))
v
v = substitute(var_name)
v
v = deparse(var_name)
v
v = deparse("sc")
v
v = substitute("sc")
v
v = deparse(substitute("sc"))
v
var_name = load(sprintf("~/algorithm-selection-data/results-pair-standard/standard_%s.RData",  scenario$desc$scenario_id))
file_name = "~/algorithm-selection-data/results-pair-standard/standard_SAT11-HAND.RData"
file_name
var_name = load(file_name)
var_name
model = deparse(var_name)
model
model = deparse(substitvar_name)
model = deparse(substitute(var_name))
model
model = get(var_name)
model
sc
llama.cv = convertToLlamaCVFolds(sc)
data = fixFeckingPresolve(sc, llama.cv)
data$test
data$test[[1]]
head(data$data)
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
data$test
data$test[1:10]
data$test[[1:10]]
data$test[[1]]
data$test[[2]]
ids = rbind(data$test)
ids
ids = rbind(lapply(data$test, function(x) {x}))
ids
lapply(data$test, function(x) x)
lapply(data$test, function(x) unlist(x))
ids = unlist(data$test)
ids
runApp('shiny-selectors/experiments/experimentLayout.R')
library(shiny); runApp('shiny-selectors/experiments/experimentLayout.R')
global
library(shiny); runApp('shiny-selectors/experiments/experimentLayout.R')
source('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
install.packages("aslib")
install.packages("aslib")
library(shiny); runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
sc
sc = getCosealASScenario("SAT11-INDU")
sc$algo.runs
runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/staticUI.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
install.packages("shiny")
install.packages("shiny")
library(shiny); runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
sc
data
llama.cv = convertToLlamaCVFolds(sc)
data = fixFeckingPresolve(sc, llama.cv)
head(data$data)
getwd()
load("./shiny-selectors/example-inputs/id.RData")
s1 = combined_model
s1
create_model(type == "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = data)
create_model(type = "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = data)
create_model(type = "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = NULL)
learner = makeImputeWrapper(learner = setHyperPars(makeLearner("regr.featureless")),
classes = list(numeric = imputeMean(), integer = imputeMean(), logical = imputeMode(),
factor = imputeConstant("NA"), character = imputeConstant("NA")))
learner
model = regression(learner,data)
model
model$models
model
model$predictions
s1
s1$predictions
typeof(s1$predictions)
class(s1$predictions)
class(model$predictions)
runApp('shiny-selectors/experiments/changingTemp.R')
?req
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
data
print(data())
runApp('shiny-selectors/experiments/over.R')
runApp('over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
head(data$data$nvarsOrig)
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
typeof(data)
class(data)
class(sc)
class(sc$desc)
class(data$data)
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
install.packages('htmlwidgets')
install.packages("htmlwidgets")
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
library(RWeka)
sessionInfo()
install.packages("RWekajars")
install.packages("RWekajars")
library(RWeka)
sessionInfo()
library(rJava)
sessionInfo()
install.packages("rJava")
install.packages("rJava")
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
install.packages("shinyjs")
library(shinyjs)
?shinyjs
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
?observeEvent
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
?reset
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
d = data.frame(paste("a") = 3)
d
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
sprintf("here\n")
cat(sprintf("here\n"))
cat(sprintf("here\na"))
sprintf("here\na")
paste(sprintf("here\na"))
cat(sprintf("here\na"))
runApp('shiny-selectors/compareSelectors.R')
?renderText
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors')
library(RColorBrewer)
display.brewer.all(colorblindFriendly = T)
runApp('shiny-selectors')
?return
?unlist
?sidebarPanel
runApp('shiny-selectors/experiments/experimentLayout.R')
?tabsetPanel
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors')
runApp('shiny-selectors')
runApp('shiny-selectors')
runApp('shiny-selectors')
runApp('visualize-selectors')
?fluidPage
runApp('visualize-selectors')
runApp('visualize-selectors')
install.packages("shinydashboard")
runApp('visualize-selectors/experiments/dash.R')
devtools::install_github("mlr-org/shinyMlr")
runShinyMlr()
librayr(mlrShiny)
library(mlrShiny)
library(shinyMlr)
runShinyMlr()
runApp('visualize-selectors/experiments/dash.R')
runApp('visualize-selectors/experiments/dash.R')
runApp('visualize-selectors/experiments/dash.R')
runApp('visualize-selectors/experiments/dash.R')
runApp('visualize-selectors/experiments/dash.R')
runApp('visualize-selectors/experiments/dash.R')
runApp('visualize-selectors/experiments/dash.R')
?tabItem
runApp('visualize-selectors/experiments/dash.R')
runApp('visualize-selectors/experiments/dash.R')
runApp('visualize-selectors/dash.R')
runApp('visualize-selectors/dash.R')
runApp("./project")
getwd()
setwd("./visualize-selectors/")
shiny::runApp("./projects", display.mode = "normal")
list.files()
shiny::runApp("./project", display.mode = "normal")
source('test.R')
source('dash.R')
icon("calendar")
runShinyMlr()
runApp('project')
sc
sc = getCosealASScenario("SAT11-INDU")
sc
typeof(sc)
class(sc)
s = data.frame(sc)
sc
class(sc)
?print.ASScenario
??print.ASScenario
source('dash.R')
runApp()
source('dash.R')
source('dash.R')
sc
print(sc)
renderTable(sc)
renderTable(sc())
renderTable(sc
)
?renderTable
source('dash.R')
