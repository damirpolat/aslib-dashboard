library(shiny); runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
sc
sc = getCosealASScenario("SAT11-INDU")
sc$algo.runs
runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/staticUI.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
install.packages("shiny")
install.packages("shiny")
library(shiny); runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
sc
data
llama.cv = convertToLlamaCVFolds(sc)
data = fixFeckingPresolve(sc, llama.cv)
head(data$data)
getwd()
load("./shiny-selectors/example-inputs/id.RData")
s1 = combined_model
s1
create_model(type == "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = data)
create_model(type = "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = data)
create_model(type = "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = NULL)
learner = makeImputeWrapper(learner = setHyperPars(makeLearner("regr.featureless")),
classes = list(numeric = imputeMean(), integer = imputeMean(), logical = imputeMode(),
factor = imputeConstant("NA"), character = imputeConstant("NA")))
learner
model = regression(learner,data)
model
model$models
model
model$predictions
s1
s1$predictions
typeof(s1$predictions)
class(s1$predictions)
class(model$predictions)
runApp('shiny-selectors/experiments/changingTemp.R')
?req
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
data
print(data())
runApp('shiny-selectors/experiments/over.R')
runApp('over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
head(data$data$nvarsOrig)
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
typeof(data)
class(data)
class(sc)
class(sc$desc)
class(data$data)
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
install.packages('htmlwidgets')
install.packages("htmlwidgets")
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
library(RWeka)
sessionInfo()
install.packages("RWekajars")
install.packages("RWekajars")
library(RWeka)
sessionInfo()
library(rJava)
sessionInfo()
install.packages("rJava")
install.packages("rJava")
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
library(aslib)
sc = getCosealASScenario("SAT11-INDU")
shiny::runApp('aslib-dashboard')
sc = getCosealASScenario("SAT11-INDU")
summarizeAlgoPerf(sc, sc$desc$performance_measures)
print(summarizeAlgoPerf(sc, sc$desc$performance_measures))
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
plotAlgoPerfBoxplots(sc, sc$desc$performance_measures)
plotAlgoPerfCDFs(sc, sc$desc$performance_measures)
plotAlgoPerfDensities(sc, sc$desc$performance_measures)
plotAlgoPerfScatterMatrix(sc, sc$desc$performance_measures)
plotAlgoPerfDensities(sc, sc$desc$performance_measures)
plotAlgoPerfCDFs(sc, sc$desc$performance_measures)
plotAlgoPerfBoxplots(sc, sc$desc$performance_measures)
runApp('aslib-dashboard')
runApp('aslib-dashboard')
shiny::runApp('aslib-dashboard')
runApp('aslib-dashboard')
scenario = getCosealASScenario("SAT11-INDU")
getwd()
setwd("aslib-dashboard/")
load("./data/id.RData")
model = combined_model
# compute MSE ratios for each solver
calculate_errors = function(scenario, data, model) {
errors = rbind.fill(lapply(seq_along(1: length(names(scenario$desc$metainfo_algorithms))), function(solver.id) {
truth = select(data$data, c("instance_id", names(scenario$desc$metainfo_algorithms)[solver.id]))
colnames(truth) = c("instance_id", "score")
truth = truth[order(truth$instance_id), ]
truth = truth[[2]]
preds = subset(model$predictions, model$predictions$algorithm == names(scenario$desc$metainfo_algorithms)[solver.id])
preds = select(preds, c("instance_id", "score"))
preds = preds[order(preds$instance_id), ]
preds = preds[[2]]
error = measureRMSE(truth, preds)
val = list(error = error, solver = names(scenario$desc$metainfo_algorithms)[solver.id])
return(val)
}))
}
data = convertToLlamaCVFolds(scenario)
data = fixFeckingPresolve(data)
data
data = fixFeckingPresolve(scenario, data)
e = calculate_errors(scenario, data, model)
??rbind.fill
library(plyr)
e = calculate_errors(scenario, data, model)
library(dplyr)
e = calculate_errors(scenario, data, model)
# compute MSE ratios for each solver
calculate_errors = function(scenario, data, model) {
errors = rbind.fill(lapply(seq_along(1: length(names(scenario$desc$metainfo_algorithms))), function(solver.id) {
truth = select(data$data, c("instance_id", names(scenario$desc$metainfo_algorithms)[solver.id]))
colnames(truth) = c("instance_id", "score")
truth = truth[order(truth$instance_id), ]
truth = truth[[2]]
preds = subset(model$predictions, model$predictions$algorithm == names(scenario$desc$metainfo_algorithms)[solver.id])
preds = select(preds, c("instance_id", "score"))
preds = preds[order(preds$instance_id), ]
preds = preds[[2]]
error = measureRMSE(truth, preds)
val = list(error = error, solver = names(scenario$desc$metainfo_algorithms)[solver.id])
val = as.data.frame(val)
return(val)
}))
}
e = calculate_errors(scenario, data, model)
head(r)
head(e)
solver.id = 1L
truth = select(data$data, c("instance_id", names(scenario$desc$metainfo_algorithms)[solver.id]))
head(truth)
colnames(truth) = c("instance_id", "score")
truth = truth[order(truth$instance_id), ]
truth = truth[[2]]
head(truth)
preds = subset(model$predictions, model$predictions$algorithm == names(scenario$desc$metainfo_algorithms)[solver.id])
head(preds)
preds = select(preds, c("instance_id", "score"))
preds = preds[order(preds$instance_id), ]
preds = preds[[2]]
head(preds)
error = measureRMSE(truth, preds)
error
e
runApp()
runApp()
e1
e
n1 <- nPlot(error ~ solver, data = e, type = "multiBarChart")
library(rCharts)
n1 <- nPlot(error ~ solver, data = e, type = "multiBarChart")
n1
e = calculate_errors(scenario, data, model)
e
# compute MSE ratios for each solver
calculate_errors = function(scenario, data, model) {
errors = rbind.fill(lapply(seq_along(1:length(names(scenario$desc$metainfo_algorithms))), function(solver.id) {
truth = select(data$data, c("instance_id", names(scenario$desc$metainfo_algorithms)[solver.id]))
colnames(truth) = c("instance_id", "score")
truth = truth[order(truth$instance_id), ]
truth = truth[[2]]
preds = subset(model$predictions, model$predictions$algorithm == names(scenario$desc$metainfo_algorithms)[solver.id])
preds = select(preds, c("instance_id", "score"))
preds = preds[order(preds$instance_id), ]
preds = preds[[2]]
error = measureRMSE(truth, preds)
val = list(RMSE = error, solver = names(scenario$desc$metainfo_algorithms)[solver.id])
val = as.data.frame(val)
return(val)
}))
}
e
head(e)
# compute MSE ratios for each solver
calculate_errors = function(scenario, data, model) {
errors = rbind.fill(lapply(seq_along(1:length(names(scenario$desc$metainfo_algorithms))), function(solver.id) {
truth = select(data$data, c("instance_id", names(scenario$desc$metainfo_algorithms)[solver.id]))
colnames(truth) = c("instance_id", "score")
truth = truth[order(truth$instance_id), ]
truth = truth[[2]]
preds = subset(model$predictions, model$predictions$algorithm == names(scenario$desc$metainfo_algorithms)[solver.id])
preds = select(preds, c("instance_id", "score"))
preds = preds[order(preds$instance_id), ]
preds = preds[[2]]
error = measureRMSE(truth, preds)
val = list(RMSE = error, solver = names(scenario$desc$metainfo_algorithms)[solver.id])
val = as.data.frame(val)
return(val)
}))
}
e = calculate_errors(scenario, data, model)
head(r)
head(e)
n1 <- nPlot(error ~ solver, data = e, type = "multiBarChart")
n1 <- nPlot(RMSE ~ solver, data = e, type = "multiBarChart")
n1
?nPlot
??nPlot
library(rCharts)
??nPlot
n1$yAxis
n1$templates
class(n1)
help(rCharts)
??rChart
library(rCharts)
??rCharts
n1$container
n1$templates
n1$x2Axis
n1$templates$afterScript
?renderChart
n1 = Nvd3$new()
n1
?Nvd
?Nvd3
??Nvd3
n1$chart
n1$layer
install.packages("rNVD3")
install_github('rNVD3', 'ramnathv')
install_github('ramnathv/rNVD3')
devtools::install_github('ramnathv/rNVD3')
library(rNVD3)
bar1 <- nvd3Plot(~gear, data = mtcars, type = "discreteBarChart", width = 600)
bar1
bar1$printChart("chart1")
bar1$chart
bar1$params
bar1$xAxis
bar1$chart
bar1
bar1$chart(color = c('red', 'blue'))
bar1
?bar1
?chart
?bar1
bar1 = Nvd3$new()
bar1 = rCharts::nvd3Plot(RMSE ~ solver, data = e, type = 'stackedBar')
bar1
bar1 = rCharts::nvd3Plot(RMSE ~ solver, data = e, type = 'multiBarChart')
bar1
bar1$setTemplate(afterScript =
"<script>
myChart.axes[0].shapes.selectAll('text')
.attr('transform', '')
.style('text-anchor','middle')
.style('font-size','50%')
</script>"
)
bar1
bar1$setTemplate(afterScript =
"<script>
myChart.axes[0].shapes.selectAll('text')
.attr('transform', '')
.style('text-anchor','left')
.style('font-size','50%')
</script>"
)
bar1
bar1$setTemplate(afterScript =
"<script>
myChart.axes[0].shapes.selectAll('text')
.attr('transform', '')
.style('text-anchor','left')
.style('font-size','50%')
</script>"
)
bar1$setTemplate(afterScript =
"<script>
myChart.axes[0].shapes.selectAll('text')
.attr('transform', 'translate(300, 150) rotate(45')
.style('text-anchor','left')
.style('font-size','50%')
</script>")
bar1
bar1$setTemplate(afterScript =
"<script>
myChart.axes[0].shapes.selectAll('text')
.attr('transform', 'translate(300, 150) rotate(45')
.style('text-anchor','left')
.style('font-size','50%')
</script>")
bar1
.Platform
.Platform$file.sep
runApp()
?shinyFileChoose
runApp()
runApp()
runApp()
?normalizePath
runApp()
runApp()
runApp()
runApp()
?verbatimTextOutput
d = data.frame(matrix(ncol = 11, nrow = 20))
d
ui = dashboardPage(
dashboardHeader(title = "Testing a bug",
titleWidth = 440),
dashboardSidebar(
sidebarMenu(
menuItem("Ex", tabName = "ex", icon = icon("file-import")),
)
),
dashboardBody(
tabItems(
# input tab
tabItem(tabName = "ex",
fluidRow(
column(width = 2,
selectInput("a1", label = h4(strong("Text")),
choices = c("c1", "c2")),
selectInput("a2", label = h4(strong("Text")),
choices = c("c1", "c2")),
selectInput("a3", label = h4(strong("Text")),
choices = c("c1", "c2"))
)
),
linebreak(2),
# summary
column(width = 8, offset = 4,
htmlOutput("title"),
verbatimTextOutput("perf"),
tags$head(tags$style("#clickGene{overflow-y:scroll; max-height: 50px;}"))
)
)
)
)
)
ui = dashboardPage(
dashboardHeader(title = "Testing a bug",
titleWidth = 440),
dashboardSidebar(
sidebarMenu(
menuItem("Ex", tabName = "ex", icon = icon("file-import"))
)
),
dashboardBody(
tabItems(
# input tab
tabItem(tabName = "ex",
fluidRow(
column(width = 2,
selectInput("a1", label = h4(strong("Text")),
choices = c("c1", "c2")),
selectInput("a2", label = h4(strong("Text")),
choices = c("c1", "c2")),
selectInput("a3", label = h4(strong("Text")),
choices = c("c1", "c2"))
)
),
linebreak(2),
# summary
column(width = 8, offset = 4,
htmlOutput("title"),
verbatimTextOutput("perf"),
tags$head(tags$style("#clickGene{overflow-y:scroll; max-height: 50px;}"))
)
)
)
)
)
) {
HTML(strrep(br(), n))
# line break
linebreak = function(n) {
HTML(strrep(br(), n))
}
ui = dashboardPage(
dashboardHeader(title = "Testing a bug",
titleWidth = 440),
dashboardSidebar(
sidebarMenu(
menuItem("Ex", tabName = "ex", icon = icon("file-import"))
)
),
dashboardBody(
tabItems(
# input tab
tabItem(tabName = "ex",
fluidRow(
column(width = 2,
selectInput("a1", label = h4(strong("Text")),
choices = c("c1", "c2")),
selectInput("a2", label = h4(strong("Text")),
choices = c("c1", "c2")),
selectInput("a3", label = h4(strong("Text")),
choices = c("c1", "c2"))
)
),
linebreak(2),
# summary
column(width = 8, offset = 4,
htmlOutput("title"),
verbatimTextOutput("perf"),
tags$head(tags$style("#clickGene{overflow-y:scroll; max-height: 50px;}"))
)
)
)
)
)
source('~/learn-to-shine/rshiny-lessons/possible-bug.R')
source('~/learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('~/learn-to-shine/rshiny-lessons/possible-bug.R')
print(data)
d
print(d)
runApp('~/learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('~/learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('~/learn-to-shine/rshiny-lessons/possible-bug.R')
d
rep.int("s", 5)
rep.int("very long titles here", 5)
runApp('~/learn-to-shine/rshiny-lessons/possible-bug.R')
d[[1]]
d[[2]]
d[1]
d[1, ]
d[1]
d[1] = rep.int("very long gitlese here", 20)
d
runApp('~/learn-to-shine/rshiny-lessons/possible-bug.R')
rand(40)
rand(4)
n.rand(4)
runif(5)
lapply(d)
length(d)
lapply(2:length(d), function(i) {d[i] = runif(20)})
lapply(2:length(d), function(i) {d[i] = runif(20)})
runApp('~/learn-to-shine/rshiny-lessons/possible-bug.R')
runif(2)
round(runif(2))
round(runif(2), 2)
runApp('~/learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('~/learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('~/learn-to-shine/rshiny-lessons/possible-bug.R')
