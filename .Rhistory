runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
?load
ls()
var_name = "sc"
?deparse
v = deparse(var_name)
v
v = deparse(eval(var_name))
v
v =  deparse(substitute(var_name))
v
v = substitute(var_name)
v
v = deparse(var_name)
v
v = deparse("sc")
v
v = substitute("sc")
v
v = deparse(substitute("sc"))
v
var_name = load(sprintf("~/algorithm-selection-data/results-pair-standard/standard_%s.RData",  scenario$desc$scenario_id))
file_name = "~/algorithm-selection-data/results-pair-standard/standard_SAT11-HAND.RData"
file_name
var_name = load(file_name)
var_name
model = deparse(var_name)
model
model = deparse(substitvar_name)
model = deparse(substitute(var_name))
model
model = get(var_name)
model
sc
llama.cv = convertToLlamaCVFolds(sc)
data = fixFeckingPresolve(sc, llama.cv)
data$test
data$test[[1]]
head(data$data)
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
data$test
data$test[1:10]
data$test[[1:10]]
data$test[[1]]
data$test[[2]]
ids = rbind(data$test)
ids
ids = rbind(lapply(data$test, function(x) {x}))
ids
lapply(data$test, function(x) x)
lapply(data$test, function(x) unlist(x))
ids = unlist(data$test)
ids
runApp('shiny-selectors/experiments/experimentLayout.R')
library(shiny); runApp('shiny-selectors/experiments/experimentLayout.R')
global
library(shiny); runApp('shiny-selectors/experiments/experimentLayout.R')
source('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
install.packages("aslib")
install.packages("aslib")
library(shiny); runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
sc
sc = getCosealASScenario("SAT11-INDU")
sc$algo.runs
runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/staticUI.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
install.packages("shiny")
install.packages("shiny")
library(shiny); runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
sc
data
llama.cv = convertToLlamaCVFolds(sc)
data = fixFeckingPresolve(sc, llama.cv)
head(data$data)
getwd()
load("./shiny-selectors/example-inputs/id.RData")
s1 = combined_model
s1
create_model(type == "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = data)
create_model(type = "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = data)
create_model(type = "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = NULL)
learner = makeImputeWrapper(learner = setHyperPars(makeLearner("regr.featureless")),
classes = list(numeric = imputeMean(), integer = imputeMean(), logical = imputeMode(),
factor = imputeConstant("NA"), character = imputeConstant("NA")))
learner
model = regression(learner,data)
model
model$models
model
model$predictions
s1
s1$predictions
typeof(s1$predictions)
class(s1$predictions)
class(model$predictions)
runApp('shiny-selectors/experiments/changingTemp.R')
?req
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
data
print(data())
runApp('shiny-selectors/experiments/over.R')
runApp('over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
head(data$data$nvarsOrig)
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
typeof(data)
class(data)
class(sc)
class(sc$desc)
class(data$data)
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
install.packages('htmlwidgets')
install.packages("htmlwidgets")
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
library(RWeka)
sessionInfo()
install.packages("RWekajars")
install.packages("RWekajars")
library(RWeka)
sessionInfo()
library(rJava)
sessionInfo()
install.packages("rJava")
install.packages("rJava")
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
library(aslib)
sc = getCosealASScenario("SAT11-INDU")
shiny::runApp('aslib-dashboard')
sc = getCosealASScenario("SAT11-INDU")
summarizeAlgoPerf(sc, sc$desc$performance_measures)
print(summarizeAlgoPerf(sc, sc$desc$performance_measures))
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
plotAlgoPerfBoxplots(sc, sc$desc$performance_measures)
plotAlgoPerfCDFs(sc, sc$desc$performance_measures)
plotAlgoPerfDensities(sc, sc$desc$performance_measures)
plotAlgoPerfScatterMatrix(sc, sc$desc$performance_measures)
plotAlgoPerfDensities(sc, sc$desc$performance_measures)
plotAlgoPerfCDFs(sc, sc$desc$performance_measures)
plotAlgoPerfBoxplots(sc, sc$desc$performance_measures)
runApp('aslib-dashboard')
runApp('aslib-dashboard')
library(shiny)
tags$h1("s")
tags$head("s")
tags$head()
tags$head("a")
tags$head(tags$style("font-size:11px))
)
tags$head(tags$style("font-size:11px"))
tags$head(tags$style("font-size:11px", "a"))
?tags$style
tags$div(tags$style("font-size:11px", "a"))
tags$div(tags$style("font-size:11px", "text"))
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
HTML("a")
HTML("#perf")
HTML("#perf {font-size: 1px;}")
tags$style(HTML("#perf {font-size: 1px;}"))
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
renderText({"l"})
renderText({"a"})
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
renderText({"a"})
d = data.frame(matrix(ncol = 11, nrow = 20))
d[1] = rep.int("very long titles here", 20)
d[2] = rep.int("more text", 20)
for(i in 3:20) {
d[i] = round(runif(20), 3)
}
d
print(d)
cat(d)
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
htmlOutput("summary", container = tags$li, class = "custom-li-output")
data
d
HTML(d)
HTML(paste(d))
print(d)
HTML(print(d))
HTML(print(d))
HTML(summary(d))
HTML(print(d))
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
?renderTable
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
?datatable
library(DT)
?DT
help(DT)
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
runApp('learn-to-shine/rshiny-lessons/possible-bug.R')
setwd("./aslib-dashboard/")
runApp()
runApp()
?dataTableOutput
runApp()
runApp()
?datatable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install_github("daranzolin/compareBars")
library(compareBars)
d %>%
spread(continent, pop) %>%
mutate(year = factor(year)) %>%
compareBars(year, Americas, Europe)
library(tidyverse)
library(gapminder)
library(patchwork)
d
scenario = getCosealASScenario("SAT11-INDU")
data = convertToLlamaCVFolds(scenario)
load("./data/id.RData")
model = combined_model
# compute MSE ratios for each solver
calculate_errors = function(scenario, data, model) {
errors = rbind.fill(lapply(seq_along(1:length(names(scenario$desc$metainfo_algorithms))), function(solver.id) {
truth = select(data$data, c("instance_id", names(scenario$desc$metainfo_algorithms)[solver.id]))
colnames(truth) = c("instance_id", "score")
truth = truth[order(truth$instance_id), ]
truth = truth[[2]]
preds = subset(model$predictions, model$predictions$algorithm == names(scenario$desc$metainfo_algorithms)[solver.id])
preds = select(preds, c("instance_id", "score"))
preds = preds[order(preds$instance_id), ]
preds = preds[[2]]
error = measureRMSE(truth, preds)
val = list(RMSE = error, solver = names(scenario$desc$metainfo_algorithms)[solver.id])
val = as.data.frame(val)
return(val)
}))
}
e1 = calculate_errors(scenario, data, model)
head(e1)
library(shiny)
library(mlr)
library(llama)
library(aslib)
library(scatterD3)
library(shinyFiles)
e1 = calculate_errors(scenario, data, model)
library(plyr)
e1 = calculate_errors(scenario, data, model)
library(dplyr)
e1 = calculate_errors(scenario, data, model)
head(e1)
load("./data/metrics.RData")
e1 = combined_model
model = e1
load("./data/id.RData")
e1 = calculate_errors(scenario, data, model)
load("./data/metrics.RData")
load("./data/id.RData")
model = combined_model
e1 = calculate_errors(scenario, data, model)
load("./data/metrics.RData")
model = combined_model
e2 = calculate_errors(scenario, data, model)
head(e1)
head(e2)
d = cbind(e1, e2)
head(d)
d = cbind(e1, e2$RMSE)
head(d)
colnames(d) = c("s1", "solver", "s2")
head(d)
d = d[c(1, 3, 2), ]
head(d)
d
d = cbind(e1, e2$RMSE)
head(d)
d = d[, c(1, 3, 2)]
head(d)
colnames(d) = c("s1", "s2", "solver")
head(d)
p = compareBars(data = d, s1, s2)
?compareBars
p = compareBars(data = d, solver, s1, s2)
p
help(compareBars)
p
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
hair_eye_male
d
d_long = gather(d, selector, s1:s2)
library(tidyr)
d_long = gather(d, selector, s1:s2)
d_long = gather(d, selector, s1:s2, factor_key = TRUE)
d_long = gather(d, selector, "s1":"s2", factor_key = TRUE)
d
d_long = gather(d, selector, "s1":"s2", factor_key = TRUE)
rlang::last_error()
d_long = gather(d, selector, s1:s2\ factor_key = TRUE)
d_long = gather(d, selector, s1:s2, factor_key = TRUE)
library(reshape2)
d_long = melt(d, id.vars = c("solver"))
head(d_long)
n1 = nPlot(data = d_long, value ~ variable, type = 'multiBarChart')
library(rCharts)
n1 = nPlot(data = d_long, value ~ variable, type = 'multiBarChart')
n1
d_long
n1 = nPlot(data = d_long, value ~ variable, group = "solver", type = 'multiBarChart')
n1
n1 = nPlot(data = d_long, value ~ variable, type = 'multiBarChart')
n1
n1 = nPlot(data = d_long, value ~ variable, group = "solver", type = 'multiBarChart')
n1
d
d$ratio = d$s1 / d$s2
head(d)
d_ratio = d[, c(3, 4)]
head(d_ratio)
n2 = nPlot(data = d_ratio, ratio ~ solver, type = 'multiBarChart')
n2
n2$xAxis(rotateLabels=-90)
n2
n2$xAxis
head(d_ratio)
d_ratio$ratio = d_ratio$ratio - 1
head(d_ratio)
n2 = nPlot(data = d_ratio, ratio ~ solver, type = 'multiBarChart')
n2
n1 = nPlot(data = d_long, value ~ variable, group = "solver", type = 'multiBarChart')
n1
n1 = nPlot(data = d_long, value ~ variable, type = 'multiBarChart')
n1
head(d_long)
n1 = nPlot(data = d_long, value ~ solver, group = "variable", type = 'multiBarChart')
n1
n1$xAxis(rotateLabels=-90)
n1
n1$xAxis(rotateLabels=-45)
n1
n1 = nPlot(data = d_long, value ~ solver, group = "variable", type = 'multiBarChart', reduceXTicks: true)
n1 = nPlot(data = d_long, value ~ solver, group = "variable", type = 'multiBarChart', reduceXTicks = true)
n1
n1 = nPlot(data = d_long, value ~ solver, group = "variable", type = 'multiBarChart', reduceXTicks = false)
n1 = nPlot(data = d_long, value ~ solver, group = "variable", type = 'multiBarChart', reduceXTicks = TRUE)
n1
n1$xAxis(rotateLabels = -45)
x1
n1
n$xAxis(tickValues = "#! function (x) {
tickvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
return tickvalues;
} !#")
n1$xAxis(tickValues = "#! function (x) {
tickvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
return tickvalues;
} !#")
n1
n1$xAxis(tickFormat = "#! function (x) {
tickformat = [''];
return tickformat[x-1];
} !#")
n1
unique(d_long$solver)
n1$xAxis(tickFormat = "#! function (x) {
tickformat = unique(d_long$solver);
return tickformat[x-1];
} !#")
n1
s = unique(d_long$solver)
s
cat(s)
s = unique(as.character(d_long$solver))
d
s
f = paste(s, sep = ",")
f
f = sprintf(s, sep = ",")
f
f = sprintf(lapply(s), sep = ",")
f = sprintf(lapply(s, function(x) {x}), sep = ",")
cat(paste(shQuote(one, type="cmd"), collapse=", "))
cat(paste(shQuote(s, type="cmd"), collapse=", "))
n1$xAxis(tickFormat = "#! function (x) {
tickformat = ["CryptoMiniSat_Strange.Night2.st_fixed_", "EBGlucose_1.0", "Lingeling_587f_fixed_", "MPhaseSAT64_2011.05.14_fixed_", "QuteRSat_2011.05.12_fixed_", "RestartSAT_B95", "SAT09referencesolverglucose_1.0", "SAT09referencesolverprecosat_236", "glucose_2", "glueminisat_2.2.5", "minisathackEBMiniSAT_2011.03.02", "minisathackLR_GL_SHR_2011.03.02", "minisathackMiniSAT_2.2.0.agile.26", "minisathackcir_minisat_2011.05.13_simp_", "minisathackcontrasat_2011.03.02", "minisathackminisat_psm_2011.04.01", "minisathackreferenceminisat_2.2.0", "rcl_2011.04.01"];
return tickformat[x-1];
} !#")
cat(paste(shQuote(s, type="cmd"), collapse=', '))
paste(shQuote(one), collapse=", ")
paste(shQuote(s), collapse=", ")
n1$xAxis(tickFormat = "#! function (x) {
tickformat = ['CryptoMiniSat_Strange.Night2.st_fixed_', 'EBGlucose_1.0', 'Lingeling_587f_fixed_', 'MPhaseSAT64_2011.05.14_fixed_', 'QuteRSat_2011.05.12_fixed_', 'RestartSAT_B95', 'SAT09referencesolverglucose_1.0', 'SAT09referencesolverprecosat_236', 'glucose_2', 'glueminisat_2.2.5', 'minisathackEBMiniSAT_2011.03.02', 'minisathackLR_GL_SHR_2011.03.02', 'minisathackMiniSAT_2.2.0.agile.26', 'minisathackcir_minisat_2011.05.13_simp_', 'minisathackcontrasat_2011.03.02', 'minisathackminisat_psm_2011.04.01', 'minisathackreferenceminisat_2.2.0', 'rcl_2011.04.01'];
return tickformat[x-1];
} !#")
n1
n1 = nPlot(data = d_long, value ~ solver, group = "variable", type = 'multiBarChart', reduceXTicks = TRUE)
n1
n1$xAxis(tickValues = "#! function (x) {
tickvalues = ['CryptoMiniSat_Strange.Night2.st_fixed_', 'EBGlucose_1.0', 'Lingeling_587f_fixed_', 'MPhaseSAT64_2011.05.14_fixed_', 'QuteRSat_2011.05.12_fixed_', 'RestartSAT_B95', 'SAT09referencesolverglucose_1.0', 'SAT09referencesolverprecosat_236', 'glucose_2', 'glueminisat_2.2.5', 'minisathackEBMiniSAT_2011.03.02', 'minisathackLR_GL_SHR_2011.03.02', 'minisathackMiniSAT_2.2.0.agile.26', 'minisathackcir_minisat_2011.05.13_simp_', 'minisathackcontrasat_2011.03.02', 'minisathackminisat_psm_2011.04.01', 'minisathackreferenceminisat_2.2.0', 'rcl_2011.04.01'];
return tickvalues;
} !#")
n1
n1$xAxis(tickFormat = "#! function (x) {
tickformat = ['CryptoMiniSat_Strange.Night2.st_fixed_', 'EBGlucose_1.0', 'Lingeling_587f_fixed_', 'MPhaseSAT64_2011.05.14_fixed_', 'QuteRSat_2011.05.12_fixed_', 'RestartSAT_B95', 'SAT09referencesolverglucose_1.0', 'SAT09referencesolverprecosat_236', 'glucose_2', 'glueminisat_2.2.5', 'minisathackEBMiniSAT_2011.03.02', 'minisathackLR_GL_SHR_2011.03.02', 'minisathackMiniSAT_2.2.0.agile.26', 'minisathackcir_minisat_2011.05.13_simp_', 'minisathackcontrasat_2011.03.02', 'minisathackminisat_psm_2011.04.01', 'minisathackreferenceminisat_2.2.0', 'rcl_2011.04.01'];
return tickformat[x-1];
} !#")
n1
