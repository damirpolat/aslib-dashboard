model = deparse(var_name)
model
model = deparse(substitvar_name)
model = deparse(substitute(var_name))
model
model = get(var_name)
model
sc
llama.cv = convertToLlamaCVFolds(sc)
data = fixFeckingPresolve(sc, llama.cv)
data$test
data$test[[1]]
head(data$data)
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
data$test
data$test[1:10]
data$test[[1:10]]
data$test[[1]]
data$test[[2]]
ids = rbind(data$test)
ids
ids = rbind(lapply(data$test, function(x) {x}))
ids
lapply(data$test, function(x) x)
lapply(data$test, function(x) unlist(x))
ids = unlist(data$test)
ids
runApp('shiny-selectors/experiments/experimentLayout.R')
library(shiny); runApp('shiny-selectors/experiments/experimentLayout.R')
global
library(shiny); runApp('shiny-selectors/experiments/experimentLayout.R')
source('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
install.packages("aslib")
install.packages("aslib")
library(shiny); runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
sc
sc = getCosealASScenario("SAT11-INDU")
sc$algo.runs
runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/staticUI.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
install.packages("shiny")
install.packages("shiny")
library(shiny); runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
sc
data
llama.cv = convertToLlamaCVFolds(sc)
data = fixFeckingPresolve(sc, llama.cv)
head(data$data)
getwd()
load("./shiny-selectors/example-inputs/id.RData")
s1 = combined_model
s1
create_model(type == "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = data)
create_model(type = "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = data)
create_model(type = "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = NULL)
learner = makeImputeWrapper(learner = setHyperPars(makeLearner("regr.featureless")),
classes = list(numeric = imputeMean(), integer = imputeMean(), logical = imputeMode(),
factor = imputeConstant("NA"), character = imputeConstant("NA")))
learner
model = regression(learner,data)
model
model$models
model
model$predictions
s1
s1$predictions
typeof(s1$predictions)
class(s1$predictions)
class(model$predictions)
runApp('shiny-selectors/experiments/changingTemp.R')
?req
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
data
print(data())
runApp('shiny-selectors/experiments/over.R')
runApp('over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
head(data$data$nvarsOrig)
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
typeof(data)
class(data)
class(sc)
class(sc$desc)
class(data$data)
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
install.packages('htmlwidgets')
install.packages("htmlwidgets")
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
library(RWeka)
sessionInfo()
install.packages("RWekajars")
install.packages("RWekajars")
library(RWeka)
sessionInfo()
library(rJava)
sessionInfo()
install.packages("rJava")
install.packages("rJava")
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
library(aslib)
sc = getCosealASScenario("SAT11-INDU")
shiny::runApp('aslib-dashboard')
sc = getCosealASScenario("SAT11-INDU")
summarizeAlgoPerf(sc, sc$desc$performance_measures)
print(summarizeAlgoPerf(sc, sc$desc$performance_measures))
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
plotAlgoPerfBoxplots(sc, sc$desc$performance_measures)
plotAlgoPerfCDFs(sc, sc$desc$performance_measures)
plotAlgoPerfDensities(sc, sc$desc$performance_measures)
plotAlgoPerfScatterMatrix(sc, sc$desc$performance_measures)
plotAlgoPerfDensities(sc, sc$desc$performance_measures)
plotAlgoPerfCDFs(sc, sc$desc$performance_measures)
plotAlgoPerfBoxplots(sc, sc$desc$performance_measures)
runApp('aslib-dashboard')
runApp('aslib-dashboard')
r2d3::r2d3("workshops/learn-d3/d3.R", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
//
var barHeight = Math.ceil(height / data.length);
svg.selectAll('rect')
.data(data)
r2d3::r2d3("workshops/learn-d3/d3-r.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
shiny::runApp('aslib-dashboard/project')
runApp('aslib-dashboard/project')
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
?r2d3
getwd()
setwd("./aslib-dashboard/d3-plot/")
# testing r2d3
load("../data/id.RData")
model1 = combined_model
load("../data/metrics.RData")
model2 = combined_model
shiny::runApp('aslib-dashboard')
setwd("aslib-dashboard/d3-plot/")
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
library(plotly)
fig <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
fig
?plot_ly
errors
data = read.csv("data.csv")
data
errors = data
head(errors)
plot = plot_ly(data = errors, x = RMSE, y = solver, type = "bar")
plot = plot_ly(data = errors, x = "RMSE", y = "solver", type = "bar")
plot
head(errors)
plot = plot_ly(data = errors, type = "bar")
plot
plot = plot_ly(data = errors, x = ~RMSE, y = ~solver, type = "bar")
plot
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar")
plot
?layout
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar")
plot = plot + layout(title = "RMSE Ratios subtracted by 1")
plot
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar")
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1")
plot
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar")
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
yaxis = list(title = 'Solvers'))
plot
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar")
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers'))
plot
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))))
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers'))
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)))
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers'))
plot
schema()
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)))
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers'))
plot = plot %>%
add_trace(
hovertemplate = 'Solver: %{y}<extra></extra>',
showlegend = FALSE
)
plot
?add_trace
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
hovertemplate = 'Solver: %{y}<extra></extra>',
showlegend = FALSE)
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers'))
plt
plot
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
hovertemplate = 'Solver: %{x}<extra></extra>',
showlegend = FALSE)
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers'))
plot
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
hovertemplate = 'Solver: %{x}<p>Value: %{y}',
showlegend = FALSE)
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers'))
plot
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
hovertemplate = 'solver: %{x}<br>salue: %{y}</br>',
showlegend = FALSE)
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers'))
plot
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
hovertemplate = 'solver: %{x}<br>value: %{y}</br>',
showlegend = FALSE)
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers'))
plot
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
hovertemplate = 'solver: %{x}<br>value: %{y:$.3f}</br>',
showlegend = FALSE)
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers'))
plot
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
hovertemplate = 'solver: %{x}<br>value: %{y:.3f}</br>',
showlegend = FALSE)
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers'))
plot
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
hovertemplate = 'solver: %{x}<br>value: %{y:.3f}</br>',
showlegend = FALSE)
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers', tickangle = 45))
plot
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
hovertemplate = 'solver: %{x}<br>value: %{y:.3f}</br>',
showlegend = FALSE)
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers', tickangle = 45))
plot = plot %>% config(displaylogo = FALSE)
plot
?config
plot
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
hovertemplate = 'solver: %{x}<br>value: %{y:.3f}</br>',
showlegend = FALSE)
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers', tickangle = 45))
plot = plot %>% config(displaylogo = FALSE,
modeBarButtonsToRemove = c("zoomIn2d", "zoomOut2d"))
plot
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
hovertemplate = 'solver: %{x}<br>value: %{y:.3f}</br>',
showlegend = FALSE)
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers', tickangle = 45))
plot = plot %>% config(displaylogo = FALSE,
modeBarButtonsToRemove = c("zoomIn2d", "zoomOut2d", "lasso2d"))
plot
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
hovertemplate = 'solver: %{x}<br>value: %{y:.3f}</br>',
showlegend = FALSE)
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers', tickangle = 45))
plot = plot %>% config(displaylogo = FALSE,
modeBarButtonsToRemove = c("zoomIn2d", "zoomOut2d",
"lasso2d", "select2d"))
plot
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
hovertemplate = 'solver: %{x}<br>value: %{y:.3f}</br>',
showlegend = FALSE)
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers', tickangle = 45))
plot = plot %>% config(displaylogo = FALSE,
modeBarButtonsToRemove = c("zoomIn2d", "zoomOut2d",
"lasso2d", "select2d",
"hoverClosestCartesian"))
plot
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
hovertemplate = 'solver: %{x}<br>value: %{y:.3f}</br>',
showlegend = FALSE)
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers', tickangle = 45))
plot = plot %>% config(displaylogo = FALSE,
modeBarButtonsToRemove = c("zoomIn2d", "zoomOut2d",
"lasso2d", "select2d",
"hoverClosestCartesian",
"hoverCompareCartesian"))
plot
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
hovertemplate = 'solver: %{x}<br>value: %{y:.3f}</br>',
showlegend = FALSE)
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers', tickangle = 45))
plot = plot %>% config(displaylogo = FALSE,
modeBarButtonsToRemove = c("zoomIn2d", "zoomOut2d",
"lasso2d", "select2d",
"hoverClosestCartesian",
"hoverCompareCartesian",
"toggleSpikelines"))
plot
# bar chart with plotly
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
hovertemplate = 'solver: %{x}<br>value: %{y:.3f}</br>',
showlegend = FALSE)
plot = plot %>% onRender("
function(el, x) {
Plotly.d3.select('.cursor-crosshair').style('cursor', 'default')
}
")
# bar chart with plotly
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
hovertemplate = 'solver: %{x}<br>value: %{y:.3f}</br>',
showlegend = FALSE) %>% onRender("
function(el, x) {
Plotly.d3.select('.cursor-crosshair').style('cursor', 'default')
}
")
library(htmlwidgets)
# bar chart with plotly
plot = plot_ly(data = errors, x = ~solver, y = ~RMSE, type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
hovertemplate = 'solver: %{x}<br>value: %{y:.3f}</br>',
showlegend = FALSE) %>% onRender("
function(el, x) {
Plotly.d3.select('.cursor-crosshair').style('cursor', 'default')
}
")
plot = plot %>% layout(title = "RMSE Ratios subtracted by 1",
xaxis = list(title = 'Solvers', tickangle = 45))
# remove unnecessary menu options
plot = plot %>% config(displaylogo = FALSE,
modeBarButtonsToRemove = c("zoomIn2d", "zoomOut2d",
"lasso2d", "select2d",
"hoverClosestCartesian",
"hoverCompareCartesian",
"toggleSpikelines"))
plot
