runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
?fileInput
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
?load
ls()
var_name = "sc"
?deparse
v = deparse(var_name)
v
v = deparse(eval(var_name))
v
v =  deparse(substitute(var_name))
v
v = substitute(var_name)
v
v = deparse(var_name)
v
v = deparse("sc")
v
v = substitute("sc")
v
v = deparse(substitute("sc"))
v
var_name = load(sprintf("~/algorithm-selection-data/results-pair-standard/standard_%s.RData",  scenario$desc$scenario_id))
file_name = "~/algorithm-selection-data/results-pair-standard/standard_SAT11-HAND.RData"
file_name
var_name = load(file_name)
var_name
model = deparse(var_name)
model
model = deparse(substitvar_name)
model = deparse(substitute(var_name))
model
model = get(var_name)
model
sc
llama.cv = convertToLlamaCVFolds(sc)
data = fixFeckingPresolve(sc, llama.cv)
data$test
data$test[[1]]
head(data$data)
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
data$test
data$test[1:10]
data$test[[1:10]]
data$test[[1]]
data$test[[2]]
ids = rbind(data$test)
ids
ids = rbind(lapply(data$test, function(x) {x}))
ids
lapply(data$test, function(x) x)
lapply(data$test, function(x) unlist(x))
ids = unlist(data$test)
ids
runApp('shiny-selectors/experiments/experimentLayout.R')
library(shiny); runApp('shiny-selectors/experiments/experimentLayout.R')
global
library(shiny); runApp('shiny-selectors/experiments/experimentLayout.R')
source('shiny-selectors/experiments/experimentLayout.R')
runApp('shiny-selectors/experiments/experimentLayout.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
install.packages("aslib")
install.packages("aslib")
library(shiny); runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
sc
sc = getCosealASScenario("SAT11-INDU")
sc$algo.runs
runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/upload-experiment.R')
runApp('shiny-selectors/experiments/staticUI.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
install.packages("shiny")
install.packages("shiny")
library(shiny); runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
sc
data
llama.cv = convertToLlamaCVFolds(sc)
data = fixFeckingPresolve(sc, llama.cv)
head(data$data)
getwd()
load("./shiny-selectors/example-inputs/id.RData")
s1 = combined_model
s1
create_model(type == "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = data)
create_model(type = "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = data)
create_model(type = "Custom", learner_name = NULL, file_name = "./shiny-selectors/example-inputs/id.RData", data = NULL)
learner = makeImputeWrapper(learner = setHyperPars(makeLearner("regr.featureless")),
classes = list(numeric = imputeMean(), integer = imputeMean(), logical = imputeMode(),
factor = imputeConstant("NA"), character = imputeConstant("NA")))
learner
model = regression(learner,data)
model
model$models
model
model$predictions
s1
s1$predictions
typeof(s1$predictions)
class(s1$predictions)
class(model$predictions)
runApp('shiny-selectors/experiments/changingTemp.R')
?req
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/changingTemp.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
runApp('shiny-selectors/experiments/oneSelector.R')
data
print(data())
runApp('shiny-selectors/experiments/over.R')
runApp('over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
head(data$data$nvarsOrig)
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
runApp('shiny-selectors/experiments/over.R')
typeof(data)
class(data)
class(sc)
class(sc$desc)
class(data$data)
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
install.packages('htmlwidgets')
install.packages("htmlwidgets")
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
library(RWeka)
sessionInfo()
install.packages("RWekajars")
install.packages("RWekajars")
library(RWeka)
sessionInfo()
library(rJava)
sessionInfo()
install.packages("rJava")
install.packages("rJava")
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
library(shiny); runApp('shiny-selectors/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
runApp('shiny-selectors/static_ui/compareSelectors.R')
library(shiny); runApp('shiny-selectors/static_ui/compareSelectors.R')
library(aslib)
sc = getCosealASScenario("SAT11-INDU")
shiny::runApp('aslib-dashboard')
sc = getCosealASScenario("SAT11-INDU")
summarizeAlgoPerf(sc, sc$desc$performance_measures)
print(summarizeAlgoPerf(sc, sc$desc$performance_measures))
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
runApp('aslib-dashboard')
plotAlgoPerfBoxplots(sc, sc$desc$performance_measures)
plotAlgoPerfCDFs(sc, sc$desc$performance_measures)
plotAlgoPerfDensities(sc, sc$desc$performance_measures)
plotAlgoPerfScatterMatrix(sc, sc$desc$performance_measures)
plotAlgoPerfDensities(sc, sc$desc$performance_measures)
plotAlgoPerfCDFs(sc, sc$desc$performance_measures)
plotAlgoPerfBoxplots(sc, sc$desc$performance_measures)
runApp('aslib-dashboard')
runApp('aslib-dashboard')
r2d3::r2d3("workshops/learn-d3/d3.R", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
//
var barHeight = Math.ceil(height / data.length);
svg.selectAll('rect')
.data(data)
r2d3::r2d3("workshops/learn-d3/d3-r.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
shiny::runApp('aslib-dashboard/project')
runApp('aslib-dashboard/project')
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
?r2d3
getwd()
setwd("./aslib-dashboard/d3-plot/")
# testing r2d3
load("../data/id.RData")
model1 = combined_model
load("../data/metrics.RData")
model2 = combined_model
library(aslib)
library(llama)
library(plyr)
library(data.table)
files = list.files(pattern="./results-pair-one-leave-ast/proposed_leave_one_out_SAT18-EXP_")
length(files)
getwd9)
getwd()
files = list.files(pattern="./results-pair-one-leave-ast/proposed_leave_one_out_*")
length(files)
files = list.files(pattern="./results-pair-one-leave-ast/proposed_leave_one_out")
files
setwd("./results-pair-one-leave-ast/")
list.files()
files = list.files(pattern="proposed_leave_one_out")
files
length(files)
scenarios = list.dirs("../modeling-algorithmic-performance/Models/aslib_scenarios", recursive = FALSE)
scenarios = list.dirs("../modeling-algorithmic-performance/Models/aslib_scenarios",
recursive = FALSE)[!grepl("short",
list.dirs("../modeling-algorithmic-performance/Models/aslib_scenarios", recursive = FALSE))]
scenarios
scenarios = subset(scenarios, !grepl("ASP", scenarios))
scenarios = subset(scenarios, !grepl("SAT18", scenarios))
i
i=1
files = list.files(pattern=sprintf("./proposed_leave_one_out_%s", scenarios[i]))
preds = vector("list", length = 10L)
for (i in seq_along(1:10)) {
preds[[i]] = rbindlist(lapply(files, function(file) {
load(file)
return(combined_model[[i]]$predictions)
}))
}
head(preds)
files
files = list.files(pattern=sprintf("./proposed_leave_one_out_%s", scenarios[i]))
files
getwd()
scenarios[i]
scenarios
sc = scenarios
gsub("../modeling-algorithmic-performance/Models/aslib_scenarios/", "", sc)
scenarios = gsub("../modeling-algorithmic-performance/Models/aslib_scenarios/", "", sc)
scenarios
files = list.files(pattern=sprintf("./proposed_leave_one_out_%s", scenarios[i]))
files
scenarios[i]
scenarios
i=1
scenarios[i]
i=1
files = list.files(pattern=sprintf("./proposed_leave_one_out_%s", scenarios[i]))
files
sprintf("./proposed_leave_one_out_%s", scenarios[i])
scenarios = list.dirs("../modeling-algorithmic-performance/Models/aslib_scenarios",
recursive = FALSE)[!grepl("short",
list.dirs("../modeling-algorithmic-performance/Models/aslib_scenarios", recursive = FALSE))]
scenarios = subset(scenarios, !grepl("ASP", scenarios))
scenarios = subset(scenarios, !grepl("SAT18", scenarios))
sc = parseASScenario(scenarios[i])
sc$desc$scenario_id
sc = parseASScenario(scenarios[i])
files = list.files(pattern=sprintf("./proposed_leave_one_out_%s", sc$desc$scenario_id))
files
sprintf("./proposed_leave_one_out_%s", sc$desc$scenari
sprintf("./proposed_leave_one_out_%s", sc$desc$scenario_ud)
sc$desc$scenario_ud
sc$desc$scenario_id
sprintf("./proposed_leave_one_out_%s", sc$desc$scenario_id)
files = list.files(pattern=sprintf("./proposed_leave_one_out_%s_*", sc$desc$scenario_id))
files
sprintf("./proposed_leave_one_out_%s_*", sc$desc$scenario_id)
getwd()
source('~/manual-folds-manual-solvers/aggregate_leave.R', echo=TRUE)
scenarios = list.dirs("../modeling-algorithmic-performance/Models/aslib_scenarios",
recursive = FALSE)[!grepl("short",
list.dirs("../modeling-algorithmic-performance/Models/aslib_scenarios", recursive = FALSE))]
scenarios = list.dirs("../modeling-algorithmic-performance/Models/aslib_scenarios",
recursive = FALSE)[!grepl("short",
list.dirs("../modeling-algorithmic-performance/Models/aslib_scenarios", recursive = FALSE))]
scenarios = subset(scenarios, !grepl("ASP", scenarios))
scenarios = subset(scenarios, !grepl("SAT18", scenarios))
i=1L
sc = parseASScenario(scenarios[i])
files = list.files(pattern=sprintf("./proposed_leave_one_out_%s_*", sc$desc$scenario_id))
files
pattern=sprintf("./proposed_leave_one_out_%s_*", sc$desc$scenario_id)
pattern
getwd()
files = list.files(pattern=sprintf("proposed_leave_one_out_%s_*", sc$desc$scenario_id))
files
preds = vector("list", length = 10L)
for (i in seq_along(1:10)) {
preds[[i]] = rbindlist(lapply(files, function(file) {
load(file)
return(combined_model[[i]]$predictions)
}))
}
length(files)
files = list.files(pattern=sprintf("proposed_leave_one_out_%s_*", sc$desc$scenario_id))
preds = vector("list", length = 10L)
for (j in seq_along(1:10)) {
preds[[j]] = rbindlist(lapply(files, function(file) {
load(file)
return(combined_model[[j]]$predictions)
}))
}
j=1L
j=1L
j
preds[[j]] = rbindlist(lapply(files, function(file) {
load(file)
return(combined_model[[j]]$predictions)
}))
preds
preds[1]
preds
rm(preds)
preds[[j]] = rbindlist(lapply(files, function(file) {
load(file)
return(combined_model[[j]]$predictions)
}))
preds = rbindlist(lapply(files, function(file) {
load(file)
return(combined_model[[j]]$predictions)
}))
preds
length(preds)
length(preds$instance_id)
preds
load(files[1])
vals[[1]]$predictions = vals[[1]]
#scenarios = gsub("../modeling-algorithmic-performance/Models/aslib_scenarios/", "", sc)
vals = vector(length = length(scenarios))
vals
load(files[1])
vals[[1]]$predictions = vals[[1]]
vals
vals[[1]]
vals[[1]]$p = h
vals[[1]]$p = "g"
vals[[1]]
#scenarios = gsub("../modeling-algorithmic-performance/Models/aslib_scenarios/", "", sc)
vals = vector(length = length(scenarios), mode = "list")
vals
vals[[1]]
load(files[1])
vals[[1]]$predictions = vals[[1]]
vals[[1]]$models = combined_model[[1]]$models
vals
vals[[1]]
vals
load(files[1])
vals[[1]]$predictions = preds
vals[[1]]$predictions
vals[[1]]$models = combined_model[[1]]$models
vals[[1]]
head(vals[[1]])
combined_model$test.model
vals[[1]]$models = combined_model$test.model
vals[[1]]$models
vals[[1]]$predictions
i
i=1
#vals[[i]]$predictions = outer.preds[2, i]$rest.model$predictions
vals[[i]]$predictions = vals[[i]]$predictions[order(vals[[i]]$predictions$instance_id, vals[[i]]$predictions$score)]
head(vals[[1]]$predictions)
data = convertToLlamaCVFolds(sc)
data = fixFeckingPresolve(sc, data)
mis = mean(misclassificationPenalties(data, vals[[1]]))
attr(vals[[1]], "hasPredictions") = TRUE
attr(vals[[1]])
attr(vals[[1]], "hasPredictiosn")
attr(vals[[1]], "hasPredictions")
mis = mean(misclassificationPenalties(data, vals[[1]]))
mis
shiny::runApp('~/aslib-dashboard')
r2d3::r2d3("~/aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("~/aslib-dashboard/d3-plot/barplot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
getwd()
setwd("../aslib-dashboard/")
list.files()
setwd("d3-plot/")
list.files()
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
r2d3::r2d3("~/aslib-dashboard/d3-plot/barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
getwd()
setwd("../")
runApp()
runApp()
r2d3::r2d3("~/aslib-dashboard/d3-plot/barplot.js", data=read.csv("./data.csv"))
runApp()
r2d3::r2d3("~/aslib-dashboard/d3-plot/barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("d3-plot/barplot.js", data=read.csv("./data.csv"))
getwd()
setwd("d3-plot/")
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
?r2d3
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
?d3Output
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
runApp('~/aslib-dashboard')
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
r2d3::r2d3("barplot.js", data=read.csv("./data.csv"))
runApp('~/aslib-dashboard')
